<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TowseyLibrary</name>
    </assembly>
    <members>
        <member name="M:TowseyLibrary.AutoAndCrossCorrelation.CrossCorr(System.Double[],System.Double[])">
            <summary>
            returns the fft spectrum of a cross-correlation function.
            </summary>
        </member>
        <member name="M:TowseyLibrary.AutoAndCrossCorrelation.CorrelationCoefficient(System.Double[],System.Double[])">
            <summary>
            Pearsons correlation coefficient.
            Equals the covariance normalised by the sd's.
            </summary>
        </member>
        <member name="M:TowseyLibrary.AutoAndCrossCorrelation.MyCrossCorrelation(System.Double[],System.Double[])">
            <summary>
            my own effort at Crosscorrelation.
            Input array is assumed to be of even length.
            It returns an array twice length of input array.
            The first and last entries of the returned array will not be written to and contain zeros.
            </summary>
        </member>
        <member name="M:TowseyLibrary.AutoAndCrossCorrelation.AutoCorrelationOldJavaVersion(System.Double[])">
            <summary>
            A Java version of autocorrelation.
            </summary>
        </member>
        <member name="T:TowseyLibrary.ColorCubeHelix">
            <summary>
                Code for CUBEHELIX adapted from JavaScript code obtained from following website:
                <c>https://www.mrao.cam.ac.uk/~dag/CUBEHELIX/</c>.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ColorCubeHelix.GetColor(System.Double)">
            <summary>
            This method assumes that the intensity lies in [0,1].
            </summary>
            <param name="intensity">
            </param>
            <returns>
            The <see cref="T:SixLabors.ImageSharp.Color"/>.
            </returns>
        </member>
        <member name="M:TowseyLibrary.ColorCubeHelix.DrawMatrixWithoutNormalization(System.Double[0:,0:])">
            <summary>
            Draws matrix without normalizing the values in the matrix.
                Assumes some form of normalization already done.
            </summary>
            <param name="matrix">
            the data.
            </param>
            <returns>
            The <see cref="T:SixLabors.ImageSharp.Image"/>.
            </returns>
        </member>
        <member name="T:TowseyLibrary.ConfigDictionary">
            <summary>
            Configuration files: this class is a wrapper around a Dictionary.
            </summary>
        </member>
        <member name="P:TowseyLibrary.ConfigDictionary.Source">
            <summary>
            Gets or sets Source.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ConfigDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.ConfigDictionary"/> class.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ConfigDictionary.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.ConfigDictionary"/> class.
            The configuration.
            </summary>
            <param name="files">
            The files.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Argument is null.
            </exception>
        </member>
        <member name="M:TowseyLibrary.ConfigDictionary.#ctor(System.IO.FileInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.ConfigDictionary"/> class.
            The configuration.
            </summary>
            <param name="files">
                The files.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Argument is null.
            </exception>
        </member>
        <member name="M:TowseyLibrary.ConfigDictionary.SetPair(System.String,System.String)">
            <summary>
            adds key-value pairs to a properties table.
            Removes existing pair if it has same key.
            </summary>
            <param name="key">
            key to add or replace.
            </param>
            <param name="value">
            Value to use.
            </param>
        </member>
        <member name="M:TowseyLibrary.ConfigDictionary.ReadKVPFile2Dictionary(System.String)">
            <summary>
            THIS ONLY WORKS IF ONLY HAVE KV PAIRS IN CONFIG FILE.
            IF HAVE COMMENTS ETC USE. <code>Dictionary{string,string} dict = FileTools.ReadPropertiesFile(file))</code>
            </summary>
        </member>
        <member name="T:TowseyLibrary.ConfigurationExtensions">
            <summary>
            NOTE: This is an extension class
            All its methods are extensions for the Configuraiton class.
            These methods can be called with unusual syntax!
            i.e. can call thus:- writer.WriteConfigPath(string basePath, string key, string value)
            where var writer is type TextWriter.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CsvTools.ReadCSVToTable(System.String,System.Boolean,System.Type[])">
            <summary>
            loads a data table with data in given csv file.
            If the column types are not given then default to string
            CALLED ONLY BY KIWI RECOGNIZER TO READ GROUND TRUTH TABLE.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CsvTools.ReadCSVToTable(System.String,System.Boolean)">
            <summary>
            reads a CSV file into a Datatable and deduces the data type in each column.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CsvTools.ConvertCSVRowsToListOfStringArrays(System.String[],System.Int32,System.Int32)">
            <summary>
            this method is called by the previous method when reading in a CSV file.
            It is used only to get csv data into a column format so that the data type for each field can be determined.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CsvTools.ReadCSVFile(System.String)">
            <summary>
            returns a list of the column values in a csv file plus the column headings
            ASSUMED to be doubles
            returns as lists of type double
            TODO Anthony to use the new U-BEAUT csv file reader.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CsvTools.ReadCSVFile2Dictionary(System.String)">
            <summary>
            returns a Dictionary of the column values in a csv file with column headings as keys
            ASSUMED to be doubles
            TODO Anthony to use the new U-BEAUT csv file reader.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CsvTools.ReadColumnOfCsvFile(System.String,System.Int32,System.String@)">
            <summary>
            Returns the requested column of data from a CSV file and also returns the column header.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CubeHelix.SetRedScalePallette">
            <summary>
            used for drawing the background noise in zooming spectrograms.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CubeHelix.SetCyanScalePallette">
            <summary>
            used for drawing the background noise in zooming spectrograms.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CubeHelix.GetColorID(System.Double)">
            <summary>
            Draws matrix without normalising the values in the matrix.
            Assumes some form of normalisation already done.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CubeHelix.GetColorFromPallette(System.Double)">
            <summary>
            Draws matrix without normalising the values in the matrix.
            Assumes some form of normalisation already done.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CubeHelix.GetColorFromPallette(System.Int32)">
            <summary>
            Draws matrix without normalising the values in the matrix.
            Assumes some form of normalisation already done.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CubeHelix.DrawMatrixWithoutNormalisation(System.Double[0:,0:])">
            <summary>
            Draws matrix without normalising the values in the matrix.
            Assumes some form of normalisation already done.
            </summary>
            <param name="matrix">the data.</param>
        </member>
        <member name="M:TowseyLibrary.CubeHelix.DrawTestImage">
            <summary>
            Draws a Cube Helix test image.
            </summary>
        </member>
        <member name="M:TowseyLibrary.CubeHelix.GetCubeHelix">
            <summary>
            This HSL values in this method have been set specially for use with the high-resolution zooming spectrograms.
            There are limits to the values that can be used.
            The purpose for chaning the default values was to increase the colour saturation.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTableTools.CreateTable(System.Data.DataTable)">
            <summary>
            setup skeleton of new table with same headers and column types as passed table.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTableTools.SortRows(System.Data.DataTable,System.String)">
            <summary>
            sorts all the rows in a table without filtering
            The empty string is the filtering term.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTableTools.SortTable(System.Data.DataTable,System.String)">
            <summary>
            sorts all the rows in a table without filtering
            The empty string is the filtering term.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTableTools.DeleteRows(System.Data.DataTable,System.String,System.String)">
            <summary>
            NOT DEBUGGED!!!!!.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTableTools.NormaliseColumnValues(System.Data.DataTable)">
            <summary>
            normalises the column values in a data table to values in [0,1].
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTableTools.NormaliseColumnValues(System.Data.DataTable,System.Double[],System.Double[])">
            <summary>
            normalises the column values in a data table to values in [0,1].
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTableTools.NormaliseColumnValues(System.Collections.Generic.List{System.Double[]},System.Double[],System.Double[])">
            <summary>
            normalises the column values in a data table to values in [0,1].
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Subarray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns a subarray of the passed array of any type.
            </summary>
            <param name="array">an array of any type.</param>
            <param name="start">the first element of the subarray.</param>
            <param name="length">number of elements in subarray.</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.Subarray(System.Int32[],System.Int32,System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Subarray(System.Double[],System.Int32,System.Int32)">
             <summary>
            
             </summary>
             <param name="length">the length of the subarray to be returned. </param>
        </member>
        <member name="M:TowseyLibrary.DataTools.Submatrix(System.Double[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the submatrix of passed matrix.
            Assume that <c>RowTop &lt; RowBottom, &amp;&amp; ColumnLeft &lt; ColumnRight </c>.
            Row, column indices start at 0.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.SegmentArrayOnThreshold(System.Double[],System.Double)">
            <summary>
            returns a list of acoustic events defined by start, end and intensity score.
            </summary>
            <returns>List of double[] containing three values.</returns>
        </member>
        <member name="M:TowseyLibrary.DataTools.ConvertJaggedToMatrix(System.Double[][])">
            <summary>
            converts an array of arrays to a matrix.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Matrix2Array(System.Double[0:,0:])">
            <summary>
            Converts a matrix to a vector by concatenating columns.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.VectorReduceLength(System.Double[],System.Int32)">
            <summary>
            reduces length of the passed vector by combining consecutive values into an average.
            </summary>
            <param name="v">the vector.</param>
            <param name="factor">reduction factor.</param>
            <returns>the reduced vector.</returns>
        </member>
        <member name="M:TowseyLibrary.DataTools.VectorDoubleLengthByAverageInterpolation(System.Double[])">
            <summary>
            reduces length of the passed vector by combining consecutive values into an average.
            </summary>
            <param name="v">the vector.</param>
            <returns>the reduced vector.</returns>
        </member>
        <member name="M:TowseyLibrary.DataTools.VectorEuclidianLength(System.Double[])">
            <summary>
            returns the euclidian length of vector.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Vector_NormRange(System.Double[])">
            <summary>
            returns the vector normalised for min and max values.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.SubtractMean(System.Double[])">
            <summary>
            subtracts the mean from each value of an array.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.SubtractValue(System.Double[],System.Double)">
            <summary>
            subtracts the value from each value of an array.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.SubtractValueAndTruncateToZero(System.Double[],System.Double)">
            <summary>
            subtracts the value from each value of an array
            If below zero, truncate to zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.GetMedian(System.Double[])">
            <summary>
            return median of an array.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.ZeroCrossings(System.Double[])">
             <summary>
             counts the zero crossings in a signal.
            
             </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.ZeroDippings(System.Double[])">
            <summary>
            counts the times signal drops from above to below zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.ZeroRisings(System.Double[])">
            <summary>
            counts the times signal rises from below to above zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.BoundArray(System.Double[],System.Double,System.Double)">
            <summary>
            bounds a sequence of numbers between a minimum and a maximum.
            Numbers that fall outside the bound are truncated to the bound.
            </summary>
            <param name="A">array to be bound.</param>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.SortArray(System.Double[])">
            <summary>
            sorts an array of doubles in DESCENDING order i.e. max first.
            returns both the sorted array (Item2) and the array indices in rank order (Item1).
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.SortArrayInAscendingOrder(System.Double[])">
            <summary>
            sorts an array of doubles in ASCENDING order.
            Returns both the sorted array (Item2) and the original array indices in sort order (Item1)
            this is a totally crude sort algorithm but I could not find a MathsNet sort
            that also returned the sorted indices.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.SortArray(System.Collections.Generic.List{System.Int32})">
            <summary>
            sorts a list of integers.
            returns both the sorted array (Item2) and the array indices in rank order (Item1).
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.BoundMatrix(System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            bounds a matrix of numbers between a minimum and a maximum.
            Numbers that fall outside the bound are truncated to the bound.
            </summary>
            <param name="M">the matrix to be bound.</param>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.PercentileCutoffs(System.Double[0:,0:],System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            returns the min and max percentile values of the values in passed matrix.
            Must have previously calculated the min and max values in the matrix.
            </summary>
            <param name="matrix">the matrix.</param>
            <param name="minCut">power value equivalent to minPercentile.</param>
            <param name="maxCut">power value equivalent to maxPercentile.</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.CountPositives(System.Double[])">
            <summary>
            counts the positive values in an array. Called by Classifier.Scan(Sonogram s).
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Peaks_CropLowAmplitude(System.Double[],System.Double)">
            <summary>
            prunes the start and end of an array to remove low values.
            </summary>
            <param name="data">an array of double.</param>
            <param name="threshold">must be in range [0,1].</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.Peaks_CropToFirstAndLast(System.Double[],System.Double)">
            <summary>
            Returns the location of the first and last peaks.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.GetPeaks(System.Double[])">
            <summary>
            Finds the local maxima in a vector.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.GetPeaks(System.Double[],System.Double)">
            <summary>
            Finds the local peaks in a vector whose value exceeds the passed threshold.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.PeakLocations(System.Double[],System.Double,System.Int32@,System.Double[]@)">
            <summary>
            returns an array showing locaiton of peaks.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.PeakLocations(System.Double[],System.Double)">
            <summary>
            returns a list containing integer index of every peak > threshold.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.GetPeakValues(System.Double[])">
            <summary>
            returns an array showing values at the peaks.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.GapLengths(System.Double[])">
            <summary>
            returns a list of gaps between 1s in a binary array.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.GapLengths(System.Boolean[])">
            <summary>
            returns a list of gaps between the trues in a boolean array.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.WriteArrayAsCsvLine(System.Double[],System.String)">
            <summary>
            The format string should be as follows: "0.00" for two decimal places.
            For more detail on custom numeric format string,
            see https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings.
            </summary>
            <param name="array">an array of double.</param>
            <param name="format">format string.</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.writeBarGraph(System.Double[])">
            <summary>
            this method written to display silence/noise profile of wav file. May not fit general use.
            Must be shifted and scaled because all values are neg.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.LogicalORofTwoVectors(System.Byte[],System.Byte[])">
            <summary>
            Logical AND of two vectors vector v2 to v1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.AddVectors(System.Double[],System.Double[])">
            <summary>
            Add vector v2 to v1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.SubtractVectors(System.Double[],System.Double[])">
            <summary>
            Subtract vector v2 from vector v1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.AddMatrices(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            ADD matrix m2 to matrix m1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.SubtractMatrices(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Subtract matrix m2 from matrix m1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Threshold(System.Double[0:,0:],System.Double)">
            <summary>
            Returns binary matrix with values set = 1 if they exceed the threshold else set = 0.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.SetColumnZero(System.Byte[0:,0:],System.Int32)">
            <summary>
            set all values in the passed column to zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.ScaleArray(System.Double[],System.Int32)">
            <summary>
            Lengthens or shortens an array of values with appropriate scaling.
            However this method does NOT attempt to interpolate estimated values.
            </summary>
            <param name="v">the array or vector of values to be scaled.</param>
            <param name="newLength">the lehgth of the new scaled array.</param>
            <returns>a scaled array.</returns>
        </member>
        <member name="M:TowseyLibrary.DataTools.GetInitialisedArray(System.Int32,System.Double)">
            <summary>
            returns an array of double initialised with passed value.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.normalise(System.Double[0:,0:])">
            <summary>
            normalised matrix of real values to [0,1].
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.MatrixRotate90Clockwise(System.Char[0:,0:])">
            <summary>
            Rotates a matrix 90 degrees clockwise.
            Used for Syntactic pattern recognition
            Converts Image matrix to Spectrogram data orientation.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.MatrixRotate90Clockwise(System.Double[0:,0:])">
            <summary>
            Rotates a matrix 90 degrees clockwise.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.MatrixRotate90Anticlockwise(System.Double[0:,0:])">
            <summary>
            Rotates a matrix 90 degrees anticlockwise.
            Used for Syntactic pattern recognition
            Converts Image matrix to Spectrogram data orientation.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.MatrixTranspose(System.Double[0:,0:])">
            <summary>
            performs a matrix transform.
            </summary>
            <param name="M">the matrix to transform.</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.MatrixTranspose(System.Char[0:,0:])">
            <summary>
            transforms a matrix of char.
            Used for Syntatctic pttern recognition.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.MatrixTranspose(System.Byte[0:,0:])">
            <summary>
            performs a matrix transform.
            </summary>
            <param name="M">the matrix to transform.</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.ModalValue(System.Double[],System.Double@,System.Double@)">
            <summary>
            This algorithm is derived from the Lamel et al algorithm used in the SNR class.
            Only difference is return the true model value whereever it is.
            The relevant lines have been commented.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.DiffFromMean(System.Double[0:,0:])">
            <summary>
            shift values by their mean.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.DiffFromMean(System.Double[])">
            <summary>
            shift values by their mean.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Vector2Zscores(System.Double[])">
            <summary>
            shift values by their mean.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.DotProduct(System.Double[],System.Double[])">
            <summary>
            This method requires that v1 and v2 have same dimensions.
            </summary>
            <returns>The dot product.</returns>
        </member>
        <member name="M:TowseyLibrary.DataTools.HammingDistance(System.Double[],System.Double[])">
            <summary>
            Calculates Hamming distance for two vectors of doubles.
            d[i] = 1 if((int)Math.Round(Math.Abs(v1[i] - v2[i])) == 1 ).
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.EuclideanDistance(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            returns EUCLIDIAN DISTANCE BETWEEN two matrices.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.EuclideanDistance(System.Double[],System.Double[])">
            <summary>
            returns EUCLIDEAN DISTANCE BETWEEN two vectors.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.EuclideanDistance(System.Byte[],System.Byte[])">
            <summary>
            returns EUCLIDEAN DISTANCE BETWEEN two vectors of byte.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.ManhattanDistance(System.Double[],System.Double[])">
            <summary>
            returns MANHATTAN DISTANCE BETWEEN two vectors.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Normalise(System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            normalises the values in a matrix between the passed min and max.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Normalise(System.Double[],System.Double,System.Double)">
            <summary>
            normalises the values in a vector between the passed min and max.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.NormaliseInZeroOne(System.Double,System.Double,System.Double)">
            <summary>
            normalises the values in a vector such that the passed min value = 0
            and the passed max value = 1.0
            Values LT 0.0 and GT 1.0 are truncated.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.NormaliseInZeroOne(System.Double[],System.Double,System.Double)">
            <summary>
            normalises the values in a vector such that the passed min value = 0
            and the passed max value = 1.0
            Values LT 0.0 and GT 1.0 are truncated.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.normalise(System.Int32[])">
            <summary>
            normalizes the passed array between 0,1.
            Ensures all values are positive.
            WARNING: Where the min = max (e.g. a uniform distribution),
                     this method will return an array of NaN.
                     The calling method needs to check for this.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.normalise(System.Double[])">
            <summary>
            Normalizes the passed array between 0,1.
            Ensures all values are positive.
            Minimum array value set = 0.0.
            Maximum array value set = 1.0.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.NormaliseByScalingMaxValueToOne(System.Double[])">
            <summary>
            Normalises the passed vector by keeping the vector's zero
            but scaling the max value down to 1.0.
            WARNING: This method assumes that all values in the passed array are >= zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Normalise(System.Double[],System.Double,System.Double[]@,System.Double@)">
            <summary>
            Normalises a vector in 0, 1 and also returns a threshold value accordingly normalised.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.NormaliseArea(System.Int32[])">
            <summary>
            Normalizes an array so that the sum of its values (area under curve) = 1.0
            Use to express data as probability function.
            WARNING: This method will NOT work where have a uniform distribution of negative values.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.NormaliseArea(System.Double[])">
            <summary>
            Normalizes an array so that the sum of its values (area under curve) = 1.0
            Use to express data as probability function.
            WARNING: ONLY USE THIS METHOD IF ARRAY CONTAINS NEGATIVE VALUES
            First of all normalises array into [0,1]
            WARNING: This method will NOT work where have a uniform distribution of negative values.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Normalise2Probabilites(System.Double[])">
            <summary>
            normalises an array of doubles to probabilities that sum to one.
            assumes that values in the data vector are >= zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.ConvertProbabilityDistribution2CummulativeProbabilites(System.Double[])">
            <summary>
            calculates the cumulative probabilities from a prob array.
            assumes that values in the data vector are >= zero and sum = 1.0.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.normalise_zeroEdge(System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            normalises the values in a matrix such that the minimum value
            is the average of the edge values.
            Truncate thos original values that are below the edge average.
            This method is used to NormaliseMatrixValues image templates where there should be no power at the edge.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Log10Values(System.Double[],System.Double)">
            <summary>
            Gets the log10 of an array of values.
            Assume that all values are non-zero and positive.
            </summary>
            <param name="data">The input data array.</param>
            <param name="epsilon">The smallest accepted non-zero value.</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.Entropy(System.Double[])">
             <summary>
             Calculates the entropy of the passed discrete distribution.
            
             It is assumed that each of the elements in distr[] represent the
             probability of that state and that the probabilities sum to 1.0
            
             Math.log() is base e. To convert to log base 2 need to divide by the natural log of 2 = ln2 = 0.69314.
             NOTE: In the limit as rf approaches 0, rf*log(rf) = 0.
            
             </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.EntropyNormalised(System.Double[])">
            <summary>
            returns the entropy of a vector of values normalized for vector length.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.RelativeEntropy(System.Double[])">
            Calculates the relative entropy of the passed
            discrete probability distribution.
            It is assumed that each of the elements in dist[]
            represents the probability of a symbol/state and the
            probabilities sum to 1.0
            The relative entropy is with respect to a uniform distribution.
        </member>
        <member name="M:TowseyLibrary.DataTools.RelativeEntropy(System.Double[],System.Double[])">
            Calculates the relative entropy of the passed
            discrete probability distribution.
            It is assumed that each of the elements in dist[]
            represents the probability of a symbol/state and the
            probabilities sum to 1.0
            The relative entropy is with respect to the background
            or reference distribution contained in the array refDist.
        </member>
        <member name="M:TowseyLibrary.DataTools.MinMax(System.Int32[],System.Int32@,System.Int32@)">
            <summary>
             Returns the min and max of a set of integer values in the passed array.
            </summary>
            <param name="data">array ofintegers.</param>
            <param name="min">min value to return.</param>
            <param name="max">max value to return.</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.MinMax(System.Double[0:,0:],System.Double@,System.Double@)">
            <summary>
            returns the min and max values in a matrix of doubles.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.MinMax(System.Byte[0:,0:],System.Byte@,System.Byte@)">
            <summary>
            returns the min and max values in a matrix of byte.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.GetByteDistribution(System.Byte[0:,0:])">
            <summary>
            returns the min and max values in a matrix of byte.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.MinMax(System.Double[],System.Int32@,System.Int32@,System.Double@,System.Double@)">
            returns the min and max of an array of doubles
            and the index for both.
            @param data
            @return
        </member>
        <member name="M:TowseyLibrary.DataTools.GetMaxIndex(System.Int32[])">
            <summary>
            Same as above method but returns index instead of outting it!
            returns the index of max value in an array of doubles.
            array index starts at zero.
            If more than one value is equal max, then returns location of first.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.getMaxIndex(System.Double[],System.Int32@)">
            returns the index of max value in an array of doubles.
            array index starts at zero.
            @param data
            @return
        </member>
        <member name="M:TowseyLibrary.DataTools.GetMaxIndex(System.Double[])">
            <summary>
            Same as above method but returns index instead of outting it!
            returns the index of max value in an array of doubles.
            array index starts at zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.GetMinIndex(System.Double[])">
            <summary>
            same as above but returns the index of data element having minimum value.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.getMaxIndex(System.Int32[],System.Int32@)">
            returns the index of max value in an array of int
            @param data
            @return
        </member>
        <member name="M:TowseyLibrary.DataTools.GetRankedIndicesInDecendingOrder(System.Double[])">
            returns an array of indices where the indices point to
            the data array with values ranked in descending order
            @param data
            @return
        </member>
        <member name="M:TowseyLibrary.DataTools.GetRankedIndicesInAscendingOrder(System.Double[])">
            returns an array of indices where the indices point to
            the data array with values ranked in ascending order
            @param data
            @return
        </member>
        <member name="M:TowseyLibrary.DataTools.Data2Bins(System.Int32[],System.Int32,System.Int32,System.Int32)">
            
             @param data
             @param min
             @param max
             @param binWidth
             @return
        </member>
        <member name="M:TowseyLibrary.DataTools.GetModeAndOneTailedStandardDeviation(System.Double[],System.Int32[]@,System.Double@,System.Double@,System.Int32@,System.Double@,System.Double@)">
            <summary>
            This method is used to calculate the mean and SD of acoustic indices whose distributions are very skewed, e.g. temporal entropy and cover.
            It returns the min, max, mode and one-sided standard deviation of an array of doubles.
            NOTE: The mode is prevented from being in lowest two bins because we typically do not want the mode to be near the minimum value of the distribution.
            This method accomodates the possibility that the distribution of index values is a truncated Gaussian or a skewed Gaussian.
            Once the modal position has been determined, it is assumed that the Sd is to be determined from the long-tailed side.
            i.e. the modal position is assumed to be the average of the underlying distribution.
            </summary>
            <param name="values">an array of values.</param>
            <param name="histogram">histogram dervied from passed array.</param>
            <param name="min">min value.</param>
            <param name="max">max value in the array.</param>
            <param name="modalBin">bin having modal value.</param>
            <param name="mode">the value of the mode.</param>
            <param name="SD">standard deviation of the distribution.</param>
        </member>
        <member name="M:TowseyLibrary.DataTools.GetModeAndOneTailedStandardDeviation(System.Int32[],System.Int32@,System.Int32@)">
            <summary>
            Assuming the passed histogram represents a distribution of values (derived from acoustic indices). which a signal is added to Gaussian noise,
            This method accomodates the possibility that the distribution of values is a truncated Gaussian or a skewed Gaussian.
            Once the modal position has been determined, it is assumed that the Sd is to be determined from the long-tailed side.
            i.e. the modal position is assumed to be the average of the underlying distribution.
            This method is used to calculate the mean and SD of acoustic indices whose distrubtions are very skewed, e.g. temporal entropy and cover.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.areaUnderCurve(System.Double,System.Double,System.Double,System.Double)">
            returns the area under the curve between two points on
            the curve given by x1,y1,x2,y2.
            Assumes that y1 and y2 are both positive.
        </member>
        <member name="M:TowseyLibrary.DataTools.combinatorial(System.Int32,System.Int32)">
             CALCULATES THE COMBINATORIAL(N,K) as
                             N!
                C(N,K) = ---------
                         (N-K)! K!
            
                C(N,K) = C(N,N-K), so it is more efficient to calculate C(N,N-K)
                                   if K is > half of N
            
             To minimise chance of out of range numbers, I calculate C(N,K) by
             multiplying a sequence of numerator/denominator values.
            
             NOTE: This method was originally used to calculate word association statistics.
                   But it is no longer necessary for these calculations. Hence method not used.
            
            
             @param N
             @param K
             @return the COMBINATORIAL as integer
        </member>
        <member name="M:TowseyLibrary.DataTools.filterMovingAverage(System.Single[],System.Int32)">
            wrapper so one can call moving average filter with array of float
        </member>
        <member name="M:TowseyLibrary.DataTools.filterMovingAverage(System.Int32[],System.Int32)">
            wrapper so one can call moving average filter with array of int
        </member>
        <member name="M:TowseyLibrary.DataTools.filterMovingAverageOLD(System.Double[],System.Int32)">
            <summary>
            An old and now deprecated version of the moving averge filter.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.filterMovingAverage(System.Double[],System.Int32)">
            <summary>
            A new and more accurate version of the moving average filter.
            The previous version had some errors in calculation of the trailing edge.
            This version is also more efficient because it does not have a double loop.
            It also makes a distinction between odd and even window width.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.PeriodicityDetection(System.Double[],System.Int32,System.Int32)">
            <summary>
            Returns for each position in an array a periodicity score.
            That score is the maximum obtained for a range of periods over three cycles.
            This allowes the periodicity to change over the array and still return the maximum periodicity score.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Periodicity(System.Double[],System.Int32,System.Int32)">
            <summary>
            Searches an array of values for periodicity.
            Calls the method PeriodicityDetection() to obtain a score for every combination of period and phase between the passed min and max bounds.
            The score is an estimate of the maximum amplitude for all combinations of period and phase.
            More accurately, the score is the difference between the average of the periodic indices and the average of the mid-period indices.
            Returns the maximum periodic score and the period at which it was obtained.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.PeriodicityAndPhaseDetection(System.Double[],System.Int32,System.Int32)">
            <summary>
            returns the amplitude of an oscillation in an array having the given period.
            </summary>
        </member>
        <member name="F:TowseyLibrary.DataTools.MonthNames">
            <summary>
            assumes date string has following 8 digit strcture YYYYMMDD.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.Time_ConvertDateString2DateTime(System.String)">
            <summary>
            Assume string has format YYYYMMDD_hhmmss*.
            </summary>
        </member>
        <member name="M:TowseyLibrary.DataTools.padString_pre(System.String,System.Int32)">
            Pads a string to given length.
            @param str the string
            @return formatted string.
        </member>
        <member name="M:TowseyLibrary.DataTools.padString_post(System.String,System.Int32)">
            Pads a string to given length.
            @param str the string
            @return formatted string.
        </member>
        <member name="M:TowseyLibrary.DataTools.roundDouble(System.Double,System.Int32)">
            Rounds a double to n places and returns as double.
            @param d the double value
            @param places - maximum number of decimal places
            @return formatted string.
        </member>
        <member name="M:TowseyLibrary.DataTools.WhichSideOfCentre(System.Double[],System.Double,System.Int32,System.Int32)">
            <summary>
            Given an array of monotonically increasing or decreasing values and a reference value,
            determine whether the ref value lies above or below the index halfway between the passed lower and upper indices.
            This method is recursive. It determines the index of the array whose value is closest to the ref value.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Distribution.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.Distribution"/> class.
            CONSTRUCTOR
            The minimum integer is assumed to be zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Distribution.#ctor(System.Int32[],System.Int32)">
            CONSTRUCTOR
            Passed an array of integers and a maximum possible integer value.
            The minimum integer is assumed to be zero
        </member>
        <member name="M:TowseyLibrary.Distribution.#ctor(System.Int32[],System.Int32,System.Boolean)">
            CONSTRUCTOR
            Passed an array of integers and a maximum possible integer value.
            The minimum integer is assumed to be zero
        </member>
        <member name="M:TowseyLibrary.Distribution.#ctor(System.Double[],System.Double,System.Double,System.Double,System.Boolean)">
            CONSTRUCTOR
            Passed an array of doubles, min &amp; max possible values and binWidth.
        </member>
        <member name="M:TowseyLibrary.Distribution.calculateIC">
            <summary>
            calculates the information content.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Distribution.getProbability(System.Int32)">
            returns the probability of a discrete variable having
            the passed value.
            @param value
            @return
        </member>
        <member name="M:TowseyLibrary.Distribution.getProbability(System.Int32,System.Int32)">
            returns the probability that a variable takes the value between
            start and end, inclusive.
            @param geneStart
            @param geneEnd
            @return
        </member>
        <member name="M:TowseyLibrary.Distribution.writeIC">
              write info content for each positon in array.
            
        </member>
        <member name="M:TowseyLibrary.Distribution.getExpectedIC">
            @return Returns the expectedIC.
        </member>
        <member name="M:TowseyLibrary.Distribution.getMax">
            @return Returns the max.
        </member>
        <member name="M:TowseyLibrary.Distribution.getMin">
            @return Returns the min.
        </member>
        <member name="M:TowseyLibrary.Distribution.getTotalIC">
            @return Returns the totalIC.
        </member>
        <member name="M:TowseyLibrary.Distribution.getMaxIndex">
            @return Returns the maxIndex.
        </member>
        <member name="M:TowseyLibrary.Distribution.getMinIndex">
            @return Returns the minIndex.
        </member>
        <member name="M:TowseyLibrary.Distribution.getValueCount">
            @return Returns the valueCount.
        </member>
        <member name="M:TowseyLibrary.FFT.#ctor(System.Int32,TowseyLibrary.FFT.WindowFunc)">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.FFT"/> class.
            It is a wrapper for calling method that does the FFT.
            Window Power equals sum of squared window values.
            </summary>
        </member>
        <member name="M:TowseyLibrary.FFT.Invoke(System.Double[])">
            <summary>
            Invokes an FFT on the given data array.
            cdata contains the real and imaginary terms of the coefficients representing cos and sin components respectively.
            cdata is symmetrical about terms 512 &amp; 513. Can ignore all coefficients 512 and above.
            </summary>
            <param name="data">a single frame of signal values.</param>
        </member>
        <member name="M:TowseyLibrary.FFT.InvokeDotNetFFT(System.Double[])">
            <summary>
            This .NET FFT library was downloaded from  http://www.mathdotnet.com/Iridium.aspx
            The documentation and various examples of code are available at http://www.mathdotnet.com/doc/IridiumFFT.ashx
            WARNING: THIS METHOD HAS NOT BEEN RECENTLY TESTED.
            </summary>
        </member>
        <member name="F:TowseyLibrary.FFT.Hamming">
            <summary>
            The Hamming window reduces the immediate adjacent sidelobes (compared to the Hanning) but at the expense of increased
            distal side-lobes. <see href="https://en.wikipedia.org/wiki/Window_function" />.
            </summary>
        </member>
        <member name="F:TowseyLibrary.FFT.Hanning">
            <summary>
            See comment for Hanning that compares Hamming with Hanning.
            Our experience with analysis of environmental recordings, where we often up or down sample in order to calculate indices,
            is that the HANNING window is to be preferred and it was made the default in July 2020.
            </summary>
        </member>
        <member name="M:TowseyLibrary.FFT.GetWindowFunction(System.String)">
            <summary>
            Returns an FFT window function given the name of the window type.
            </summary>
            <param name="name">FFT window name.</param>
            <returns>FFT.WindowFunc.</returns>
        </member>
        <member name="M:TowseyLibrary.FileTools.WriteDictionaryAsCsvFile(System.Collections.Generic.Dictionary{System.String,System.Double[]},System.String)">
            <summary>
            Write a dictionary of arrays as a csv file where dictionary keys are column headers and the
            arrays are the column entries.
            WARNING: Assume that all arrays are of the same size!.
            </summary>
            <param name="dictionary">a dictionary of arrays of double.</param>
            <param name="fPath">The file path.</param>
        </member>
        <member name="M:TowseyLibrary.FileTools.AddArrayAdjacentToExistingArrays(System.String,System.Double[])">
            <summary>
            THis method adds another column to an existing .csv file containing columns of data.
            It assumes that the number of elements in the list are same as rows in the existing file.
            </summary>
        </member>
        <member name="M:TowseyLibrary.FileTools.ReadDoubles2Vector(System.String)">
            <summary>
            reads a file of doubles assuming one value per line with no punctuation.
            </summary>
        </member>
        <member name="M:TowseyLibrary.FileTools.ReadDoubles2Matrix(System.String)">
            <summary>
            reads a text file of doubles formatted in rows and columns.
            </summary>
        </member>
        <member name="M:TowseyLibrary.FileTools.WriteMatrix2File_Formatted(System.Double[0:,0:],System.String,System.String)">
            <summary>
            The format string should be as follows: "0.00" for two decimal places,
            where number of zeros after the point is the number of decimal places.
            For more detail on custom numeric format string,
            see https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings.
            </summary>
        </member>
        <member name="M:TowseyLibrary.FileTools.WriteArray2File_Formatted(System.Double[],System.String,System.String)">
            <summary>
            The format string should be as follows: "0.00" for two decimal places,
            where number of zeros after the point is the number of decimal places.
            For more detail on custom numeric format string,
            see https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings.
            </summary>
        </member>
        <member name="M:TowseyLibrary.FileTools.WriteArray2File_Formatted(System.Int32[],System.String,System.String)">
            <summary>
            The format string should be as follows: "0.00" for two decimal places,
            where number of zeros after the point is the number of decimal places.
            For more detail on custom numeric format string,
            see https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings.
            </summary>
        </member>
        <member name="M:TowseyLibrary.GaussianTools.Gaussian_filter(System.Int32)">
            <summary>
            returns a 2-D Gaussian filter with side corresponding to 2 sigma.
            This formula derived from code of LeCun.
            See python code at the bottom of the class LocalContrastNormalisation.
            </summary>
        </member>
        <member name="M:TowseyLibrary.GaussianTools.Gauss(System.Int32,System.Int32,System.Double)">
            <summary>
            returns a gaussian coefficient for point x,y distance from the centre of the distribution.
            This formula derived from code of LeCun.
            See python code at the bottom of the class LocalContrastNormalisation.
            </summary>
        </member>
        <member name="M:TowseyLibrary.GraphsAndCharts.DrawWaveform(System.String,System.Double[])">
            <summary>
            This method places startTime in the centre of the waveform image and then cuts out buffer on either side.
            </summary>
        </member>
        <member name="M:TowseyLibrary.GraphsAndCharts.DrawWaveform(System.String,System.Double[],System.Double)">
            <summary>
            This method places startTime in the centre of the waveform image and then cuts out buffer on either side.
            </summary>
        </member>
        <member name="M:TowseyLibrary.GraphsAndCharts.DrawWaveform(System.String,System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            Asumes signal is between -1 and +1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.GraphsAndCharts.DrawGraph(System.String,System.Double[],System.Int32)">
            <summary>
            Assumes passed data has been normalised in 0,1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Gratings.Test_DetectPeriod2Grating">
            <summary>
            Runs a simple test of the DetectPeriod2Grating() method
            First construct an appropriate vector with alternating high and low values.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Gratings.Test_ScanArrayForGridPattern1">
            <summary>
            Runs a test of the ScanArrayForGratingPattern() method.
            First constructs a grating signal, then embeds it in longer noise signal
            The grating is defined by a period and the number of cycles.
            The search is repeated many iterations in order to get everage accuracy.
            Accuracy depends on relative levels of noise gain and signal gain i.e. the SNR.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Gratings.ScanArrayForGridPattern(System.Double[],System.Int32,System.Int32)">
            <summary>
            Steps through the passed array and checks each segment for a grating pattern having period = 2 signal samples.
            Use this method when the array to be scanned has already been reduced by some method.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Gratings.ScanArrayForGratingPattern(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Steps through the passed array and and at each step cuts out a segment having length  = numberOfCycles * cyclePeriod.
            Each segment is then reduced to length = numberOfCycles * 2.
            Then the reduced segment is passed to check for a grating pattern having period = 2 signal samples.
            Use this method when the array to be scanned will be reduced on the fly.
            </summary>
            <param name="cyclePeriod">NB! MUST BE AN EVEN NUMBER!!!.</param>
        </member>
        <member name="M:TowseyLibrary.Gratings.ScanArrayForGratingPattern(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            returns the period scores for a range of periods to be found in the passed array.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Histogram.Histo(System.Double[0:,0:],System.Int32)">
            <summary>
            HISTOGRAM from a matrix of double.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Histogram.Histo_FixedWidth(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            returns a fixed width histogram.
            Width is determined by user supplied min and max.
            </summary>
            <param name="data">the histogram data.</param>
            <param name="binWidth"> should be an integer width.</param>
            <param name="min">min value.</param>
            <param name="max">max value.</param>
        </member>
        <member name="M:TowseyLibrary.Histogram.Histo_FixedWidth(System.Double[],System.Double,System.Double,System.Double)">
            <summary>
            returns a fixed width histogram.
            Width is determined by user supplied min and max.
            </summary>
            <param name="data">the data.</param>
            <param name="binWidth"> should be an integer width.</param>
            <param name="min">the min value.</param>
            <param name="max">the max value.</param>
        </member>
        <member name="M:TowseyLibrary.Histogram.Histo(System.Int32[])">
            <summary>
            HISTOGRAM from an array of int.
            It assumes all values are positive.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Histogram.Histo(System.Int32[],System.Int32,System.Double@,System.Int32@,System.Int32@)">
            <summary>
            HISTOGRAM from an array of int.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Histogram.Histo(System.Int32[],System.Int32@,System.Int32@)">
            <summary>
             make histogram of integers where each bin has unit width.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Histogram.GetPercentileBin(System.Int32[],System.Int32)">
            <summary>
            Returns the bin ID that coincides with the passed percentile.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.GreyScaleImage2Matrix(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgb24})">
            <summary>
            reads the intensity of a grey scale image into a matrix of double.
            Assumes gray scale is 0-255 and that color.R = color.G = color.B.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.GetNoise(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Returns a small matrix of pixels chosen randomly from the passed matrix, m.
            The row and column is chosen randomly and then the reuired number of consecutive pixels is transferred.
            These noise matrices are used to obtain statistics for cross-correlation coefficients.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.ContrastStretching(System.Double[0:,0:],System.Double)">
            <summary>
            this method assumes that all the values in the passed matrix are between zero &amp; one.
            Will truncate all values > 1 to 1.0.
            Spurious results will occur if have negative values or values > 1.
            Should NormaliseMatrixValues matrix first if these conditions do not apply.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.TestCannyEdgeDetection">
            <summary>
            This method is a TEST method for Canny edge detection - see below.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.CannyEdgeDetection(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgb24},System.Byte,System.Byte)">
             <summary>
             The below method is derived from the following site
             http://premsivakumar.wordpress.com/2010/12/13/edge-detection-using-c-and-aforge-net/
             The author references the following Afroge source code
             http://www.aforgenet.com/framework/features/edge_detectors_filters.html
             See the below link for how to set the thresholds etc
             http://homepages.inf.ed.ac.uk/rbf/HIPR2/canny.htm.
            
             </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.SobelEdgeDetection(System.Double[0:,0:],System.Double)">
            <summary>
            This version of Sobel's edge detection taken from  Graig A. Lindley, Practical Image Processing
            which includes C code.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.SobelRidgeDetection(System.Double[0:,0:])">
            <summary>
            This version of Sobel's edge detection taken from  Graig A. Lindley, Practical Image Processing
            which includes C code.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.SobelRidgeDetection(System.Double[0:,0:],System.Boolean@,System.Double@,System.Double@)">
            <summary>
            This version of Sobel's edge detection taken from  Graig A. Lindley, Practical Image Processing
            which includes C code.
            HOWEVER MODIFED TO PROCESS 5x5 matrix
            MATRIX must be square with odd number dimensions.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.Sobel5X5RidgeDetection(System.Double[0:,0:],System.Boolean@,System.Double@,System.Int32@)">
            <summary>
            This version of Sobel's edge detection taken from  Graig A. Lindley, Practical Image Processing which includes C code.
            HOWEVER MODIFED TO PROCESS 5x5 matrix
            MATRIX must be square with odd number dimensions.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.MexicanHat5X5RidgeDetection(System.Double[0:,0:],System.Boolean@,System.Double@,System.Int32@)">
            <summary>
            This modifies Sobel's ridge detection by using mexican hat filter.
            The mexican hat is the difference of two gaussians on different scales.
            DoG is used in image processing to find ridges.
            MATRIX must be square with odd number dimensions.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.Reverse256GreyScale(System.Double[0:,0:])">
            <summary>
            Reverses a 256 grey scale image.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.Blur(System.Double[0:,0:],System.Int32)">
            <summary>
            blurs an image using a square neighbourhood.
            </summary>
            <param name="matrix">the image ot be blurred.</param>
            <param name="nh">Note that neighbourhood is distance either side of central pixel.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.Blur(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            blurs and image using a rectangular neighbourhood.
            Note that in this method neighbourhood dimensions are full side or window.
            </summary>
            <param name="matrix">image to be blurred.</param>
            <param name="cWindow">column Window i.e. x-dimension.</param>
            <param name="rWindow">row Window i.e. y-dimension.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.PercentileThresholds(System.Double[0:,0:],System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            returns the upper and lower thresholds for the pass upper and lower percentile cuts of matrix M
            Used for some of the noise reduciton algorithms.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.Signal2NoiseRatio_Local(System.Double[0:,0:],System.Int32)">
            <summary>
            Calculates the local signal to noise ratio in the neighbourhood of side=window
            SNR is defined as local mean / local std dev.
            Must check that the local std dev is not too small.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.GaussianBlur_5cell(System.Double[0:,0:])">
            <summary>
            Returns matrix after convolving with Gaussian blur.
            The blurring is in 2D, first blurred in x-direction, then in y-direction.
            Blurring function is {0.006,0.061, 0.242,0.383,0.242,0.061,0.006}.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DetectHighEnergyRegions1(System.Double[0:,0:])">
            <summary>
            Detect high intensity / high energy regions in an image using blurring
            followed by rules involving positive and negative gradients.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DetectHighEnergyRegions3(System.Double[0:,0:])">
            <summary>
            Detect high intensity / high energy regions in an image using blurring
            followed by bandwise thresholding.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.Shapes5(System.Double[0:,0:])">
            <summary>
            Returns an ArrayList of rectabgular shapes that represent acoustic events / syllables in the sonogram.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.Shapes_lines(System.Double[0:,0:])">
            <summary>
            Returns a binary matrix containing high energy lines in the oriignal spectrogram.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.Shapes_lines_bandwise(System.Double[0:,0:])">
            <summary>
            Returns a binary matrix containing high energy lines in the original spectrogram
            calculates the threshold bandwise.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.GetRedGradientPalette">
            <summary>
            returns a palette of a variety of coluor.
            Used for displaying clusters identified by colour.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.GetColorPalette(System.Int32)">
            <summary>
            returns a palette of a variety of coluor.
            Used for displaying clusters identified by colour.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawColourChart(System.Int32,System.Int32,SixLabors.ImageSharp.Color[])">
            <summary>
            Returns an image of an array of the passed colour patches.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.GrayScale">
            <summary>
            returns a colour array of 256 gray scale values.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.GreenScale">
            <summary>
            returns a colour array of 256 green scale values.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawReversedMDNMatrix(MathNet.Numerics.LinearAlgebra.Matrix{System.Double},System.String)">
            <summary>
            Normalises the matrix between zero and one.
            Then draws the reversed matrix and saves image to passed path.
            </summary>
            <param name="matrix">the data.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawReversedMatrix(System.Double[0:,0:],System.String)">
            <summary>
            Normalises the matrix between zero and one.
            Then draws the reversed matrix and saves image to passed path.
            </summary>
            <param name="matrix">the data.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawMatrix(System.Double[],System.String)">
            <summary>
            Draws matrix and save image.
            </summary>
            <param name="vector">the data.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawMatrix(System.Double[0:,0:],System.String)">
            <summary>
            Draws matrix and save image.
            </summary>
            <param name="matrix">the data.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawNormalisedMatrix(System.Double[0:,0:])">
            <summary>
            Draws matrix after first normalising the data.
            </summary>
            <param name="matrix">the data.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawReversedMatrix(System.Double[0:,0:])">
            <summary>
            Draws matrix after first normalising the data.
            </summary>
            <param name="matrix">the data.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawReversedMatrixWithoutNormalisation(System.Double[0:,0:])">
            <summary>
            Draws matrix without normkalising the values in the matrix.
            Assume some form of normalisation already done.
            </summary>
            <param name="matrix">the data.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawMatrixWithoutNormalisation(System.Double[0:,0:])">
            <summary>
            Draws matrix without normkalising the values in the matrix.
            Assume some form of normalisation already done.
            </summary>
            <param name="matrix">the data.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawYaxisScale(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgb24},System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Draws horizontal gridlines on Image.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawXaxisScale(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgb24},System.Int32,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            assumes the y-axis has already been drawn already.
            Therefore require an offset at bottom left to accommodate the width of the y-axis.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawMatrix(System.Double[0:,0:],System.Boolean)">
            <summary>
            Draws matrix but automatically determines the scale to fit 1000x1000 pixel image.
            </summary>
            <param name="matrix">the data.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawMatrixInColour(System.Double[0:,0:],System.Boolean)">
            <summary>
            Draws colour matrix but automatically determines the scale to fit 1000x1000 pixel image.
            </summary>
            <param name="matrix">the data.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawVectorInGrayScaleWithoutNormalisation(System.Double[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method assumes that the vector has already been normalised by some means such that all values lie between 0.0 and 1.0.
            </summary>
            <param name="vector">the vector of normalised values.</param>
            <param name="cellWidth">the width of the image.</param>
            <param name="cellHeight">the height of each image row.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.DrawMatrixInGrayScale(System.Double[0:,0:],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws matrix according to user defined scale.
            </summary>
            <param name="matrix">the data.</param>
            <param name="xPixelsPerCell">X axis scale - pixels per cell.</param>
            <param name="yPixelsPerCell">Y axis scale - pixels per cell.</param>
            <param name="reverse">determines black on white or white on black.</param>
        </member>
        <member name="M:TowseyLibrary.ImageTools.CombineImagesVertically``1(System.Collections.Generic.List{SixLabors.ImageSharp.Image{``0}})">
            <summary>
            Stacks the passed images one on top of the other.
            Adjust image to widest of them.
            </summary>
        </member>
        <member name="M:TowseyLibrary.ImageTools.CombineImagesVertically``1(System.Nullable{System.Int32},SixLabors.ImageSharp.Image{``0}[])">
            <summary>
            Stacks the passed images one on top of the other.
            </summary>
            <param name="maximumWidth">The maximum width of the output images.</param>
            <param name="array">An array of Image.</param>
            <returns>A single image.</returns>
        </member>
        <member name="M:TowseyLibrary.ImageTools.CombineImagesInLine``1(System.Collections.Generic.List{SixLabors.ImageSharp.Image{``0}})">
            <summary>
            Stacks the passed images one on top of the other.
            </summary>
            <param name="list">A list of images.</param>
            <returns>A single image.</returns>
        </member>
        <member name="M:TowseyLibrary.ImageTools.CombineImagesInLine``1(SixLabors.ImageSharp.Image{``0}[])">
            <summary>
            Stacks the passed images one on top of the other.
            Assumes that all images have the same width.
            </summary>
            <param name="images">An array of images.</param>
            <returns>A single image.</returns>
        </member>
        <member name="M:TowseyLibrary.ImageTools.GetMatrixImage(System.Double[0:,0:])">
            <summary>
            Returns an image of the data matrix.
            Normalises the values from min->max to 0->1.
            Thus the grey-scale image pixels will range from 0 to 255.
            This method was originally written to draw sonograms,
                  hence the avoidance of outliers and references to freq bins.
            Perhaps this method should be put back in BaseSonogram.cs.
            </summary>
        </member>
        <member name="T:TowseyLibrary.LLR">
            <summary>
            This class is used to calculate a simple log likelihood ratio for a matrix
            of counts over two variables that take discrete values.
            There is no constructor.
            All methods are static.
            Author: Michael Towsey.
            </summary>
        </member>
        <member name="M:TowseyLibrary.LLR.GetLLRs(System.Int32[0:,0:])">
            returns a matrix of LLR values from a given contingency table.
            @param contingencyTable
            @return
        </member>
        <member name="M:TowseyLibrary.LLR.ChiSquare(System.Int32[0:,0:],System.Double[0:,0:],System.Double@,System.Int32@)">
            <summary>
            Calculates the chi square statistic from a contingency table and the transition frequenices of a Markov Model.
            See my statistics book for engineers and scientists, Walpole and Myers, p345.
            </summary>
        </member>
        <member name="M:TowseyLibrary.LLR.ChiSquare_DF1(System.Double)">
            returns the p value for a given value of chi2 in a CHI-SQUARE table.
            Assumes one degree of freedom.
            @param chi
            @return
        </member>
        <member name="M:TowseyLibrary.LLR.CalculateLogLikelihoodRatio(System.Double,System.Double)">
            <summary>
            See Wikipedia on LLR
            -2log(Lambda)   = -2LLR = 2log[p(x|B)/p(x|Bo)] = 2log[p(x|B)] - 2log[p(x|Bo)]
            therefore           LLR = log[p(x|Bo)] - log[p(x|B)]
                where x is the observation.
                where Bo are the parameters of the null hypothesis
                where B  are the parameters of alternative hypothesis.
            </summary>
            <param name="unigramLogScore">log likelihood of the null hypothesis.</param>
            <param name="bigramLogScore">log likelihood of the alernative hypothesis.</param>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.ConcatenateMatrixRows(System.Collections.Generic.List{System.Double[0:,0:]})">
            <summary>
            TODO: This method concatenates time-sequence data but does not check that the files are in temporal sequence.
                  Nor does it check for temporal gaps.
            This method assumes that the column count for each matrix in list is identical.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.ConcatenateMatrixRows(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Concatenates two matrices that have the same column count.
            That is, each row of the output matrix is the join of the equivalent two rows of the input matrices.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.ConcatenateTwoMatrices(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Concatenates two matrices that have the same row count.
            That is, each row of the output matrix is the join of the equivalent two rows of the input matrices.
            WARNING: If the two matrices do not have the same number of rows, an exception is thrown.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.FrameMatrixWithZeros(System.Double[0:,0:],System.Int32)">
            <summary>
            Adds a frame around a matrix by adding row and columns of zeros.
            </summary>
            <param name="matrix">matrix.</param>
            <param name="frameWidth">The number of rows/columns of zeros to be added.</param>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.Submatrix``1(``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the submatrix of passed matrix.
            The returned submatrix includes the rows and column passed as bounds.
            Assume that RowTop GT RowBottom, ColumnLeft LT ColumnRight.
            Row, column indices start at 0.
            </summary>
            <param name="m">the parent matrix.</param>
            <param name="r1">start row.</param>
            <param name="c1">start column.</param>
            <param name="r2">end row inclusive.</param>
            <param name="c2">end column inclusive.</param>
            <returns>matrix to be returned.</returns>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.GetRowAveragesOfSubmatrix(System.Double[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns an array of row averages in the submatrix of passed matrix.
            This method combines two methods, Submatrix() &amp; GetRowAverages(), for efficiency
            Assume that RowTop LT RowBottom, ColumnLeft LT ColumnRight.
            Row, column indices start at 0.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.ConvertMatrixOfDouble2Byte(System.Double[0:,0:])">
            <summary>
            This method assumes that the passed matrix of double already takes values between 0.0 and 1.0.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.Matrix2Array(System.Double[0:,0:])">
            <summary>
            Converts a matrix to a vector by concatenating its columns.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.ArrayToMatrixByColumn(System.Double[],System.Int32,System.Int32)">
            <summary>
            converts a vector to a matrix in the direction of column.
            For example, the "Matrix2Array" method in MatrixTools.cs builds the vector by concatenating the columns.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.ArrayToMatrixByRow(System.Double[],System.Int32,System.Int32)">
            <summary>
            converts a vector to a matrix in the direction of row.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.ThresholdMatrix2Binary(System.Double[0:,0:],System.Double)">
            <summary>
            Converts a matrix of doubles to binary using passed threshold.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.ThresholdMatrix2RealBinary(System.Double[0:,0:],System.Double)">
            <summary>
            Converts a matrix of doubles to binary using passed threshold.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.SubtractMedian(System.Double[0:,0:])">
            <summary>
            Noise reduce matrix by subtracting the median value and truncating negative values to zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.Truncate2Zero(System.Double[0:,0:],System.Double)">
            <summary>
            truncate values below threshold to zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.SpectrogramPower2DeciBels(System.Double[0:,0:],System.Double,System.Double@,System.Double@)">
            <summary>
            Convert the power values in a matrix of spectrogram values to Decibels using: dB = 10*log10(power).
            Assume that all matrix values are positive i.e. due to prior noise removal.
            NOTE: This method also returns the min and max decibel values in the passed matrix.
            NOTE: A decibel value should be a ratio.
                  Here the ratio is implied ie it is relative to the value of maximum power in the original normalised signal.
            </summary>
            <param name="m">matrix of positive power values.</param>
            <param name="min">min value to be return by out.</param>
            <param name="max">max value to be return by out.</param>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.SpectrogramDecibels2Power(System.Double[0:,0:])">
            <summary>
            Convert the Decibels values in a matrix of spectrogram values to power values.
            Assume that all matrix values are positive due to prior noise removal.
            </summary>
            <param name="m">matrix of positive Decibel values.</param>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.SquareValues(System.Double[0:,0:])">
            <summary>
            Squares the values in a matrix.
            Primarily used when converting FFT coefficients in amplitude spectrogram to power values.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.MultiplyMatrixByFactor(System.Double[0:,0:],System.Double)">
            <summary>
            Multiplies the values in a matrix by a factor.
            Used to convert log-energy values to decibels.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.FilterBackgroundValues(System.Double[0:,0:],System.Double)">
            <summary>
            The ColourFilter parameter determines how much the low index values are emphasized or de-emphasized.
            The purpose is to make low intensity features stand out (emphasis) or become even less obvious (de-emphasis).
            This parameter applies a function that lies between y=x^-2 and y=x^2, i.e. between the square-root and the square.
            For an acoustic index value of X, newX = [(1/c - 1) * X^2 + X] * c, where c = the supplied filterCoeff.
            When filterCoeff = 1.0, small values are maximally emphasized, i.e. y=sqrt(x).
            When filterCoeff = 0.0, the matrix remains unchanged, that is, y=x.
            When filterCoeff =-1.0, small values are maximally de-emphasized, i.e. y=x^2.
            Generally usage suggests that a value of -0.25 is suitable. i.e. a slight de-emphasis.
            ..
            Visual example https://www.wolframalpha.com/input/?i=plot+y+%3D+%5B(1%2Fc+-+1)+*+x%5E2+%2B+x%5D+*+c+,+x%3D0..1,+c%3D0.0..2.0.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.BoundMatrix(System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            bounds a matrix of numbers between a minimum and a maximum.
            Numbers that fall outside the bound are truncated to the bound.
            </summary>
            <param name="matrix">the matrix to be bound.</param>
            <param name="min">The minimum bound.</param>
            <param name="max">The maximum bound.</param>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.SetSingletonsToZero(System.Double[0:,0:])">
            <summary>
            Sets any element in matrix with value> 0.0 to zero if all surrounding elements also = zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.SetDoubletsToZero(System.Double[0:,0:])">
            <summary>
            Sets any element in matrix with value> 0.0 to zero if all surrounding elements also = zero.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.PercentileCutoffs(System.Double[0:,0:],System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            returns the min and max percentile values of the values in passed matrix.
            </summary>
            <param name="matrix">the matrix.</param>
            <param name="minPercentile">minPercentile.</param>
            <param name="maxPercentile">maxPercentile.</param>
            <param name="minCut">power value equivalent to minPercentile.</param>
            <param name="maxCut">power value equivalent to maxPercentile.</param>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.AddMatrices(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            ADD matrix m2 to matrix m1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.MaxOfTwoMatrices(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Create a matrix whose values are the max of two passed matrices, m1 and m2.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.AddMatricesWeightedSum(System.Double[0:,0:],System.Double,System.Double[0:,0:],System.Double)">
            <summary>
            Adds two matrices using weighted sum.
            Typically expected that that w1 + w2 = 0 and both matrices are normalised.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.DivideMatrix(System.Double[0:,0:],System.Double)">
            <summary>
            DIVIDE matrix m1 by factor.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.SubtractMatrices(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Subtract matrix m2 from matrix m1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.AddBlankRows(System.Double[0:,0:],System.Int32)">
            <summary>
            Add rows of nan to pad out a matrix.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.NormaliseMatrixValues(System.Double[0:,0:])">
            <summary>
            Normalises matrix values so that the min and max values become [0,1], respectively.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.MatrixRotate90Clockwise(System.Double[0:,0:])">
            <summary>
            Rotates a matrix 90 degrees clockwise.
            </summary>
            <param name="m">the matrix to rotate.</param>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.MatrixRotate90Clockwise(System.Int32[0:,0:])">
            <summary>
            Rotates a matrix 90 degrees clockwise.
            </summary>
            <param name="m">the matrix to rotate.</param>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.MatrixRotate90Anticlockwise(System.Double[0:,0:])">
            <summary>
            Rotates a matrix 90 degrees anticlockwise.
            Used for Syntactic pattern recognition
            Converts Image matrix to Spectrogram data orientation.
            </summary>
            <param name="m">the matrix to rotate.</param>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.EuclidianDistance(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            returns EUCLIDIAN DISTANCE BETWEEN two matrices.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.DotProduct(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Multiplies two matrices by summing m1[r,c]*m2[r,c].
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.RescaleMatrixBetweenMinAndMax(System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            Rescales the values of a matrix so that its in and max values are those passed.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.NormaliseInZeroOne(System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            Normalises a matrix so that ---
            all values LT passed MIN are truncated to 0
            and
            all values GT passed MAX are truncated to 1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.NormaliseInZeroOne(System.Double[0:,0:],System.Double@,System.Double@)">
            <summary>
            Normalises a matrix so that all values lie between 0 and 1.
            Min value in matrix set to 0.0.
            Max value in matrix is set to 1.0.
            Rerturns the min and the max.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.NormaliseMatrixColumns(System.Double[0:,0:])">
            <summary>
            Normalises a matrix so that the values in each column lie between 0 and 1.
            This method is used in producing mfcc's where all the coefficients are weighted so has to have similar range.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.Normalise_zeroEdge(System.Double[0:,0:],System.Double,System.Double)">
            <summary>
            normalises the values in a matrix such that the minimum value
            is the average of the edge values.
            Truncate thos original values that are below the edge average.
            This method is used to NormaliseMatrixValues image templates where there should be no power at the edge.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.MinMax(System.Double[0:,0:],System.Double@,System.Double@)">
            <summary>
            returns the min and max values in a matrix of doubles.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.MinMax(System.Int32[0:,0:],System.Int32@,System.Int32@)">
            <summary>
            returns the min and max values in a matrix.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.SmoothColumns(System.Double[0:,0:],System.Int32)">
            <summary>
            This method smooths the columns of a matrix using a moving average filter.
            It is useful for smoothing the freqeuncy bins of a spectrogram
            where it is assumed that the matrix columns are the frequency bins.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.RemoveOrphanOnesInBinaryMatrix(System.Byte[0:,0:])">
            <summary>
            REMOVE ORPHAN PEAKS.
            </summary>
        </member>
        <member name="M:TowseyLibrary.MatrixTools.WriteLocationOfMaximumValues(System.Double[0:,0:])">
            <summary>
            Writes the r, c location of the maximum valuesin the matrix.
            </summary>
        </member>
        <member name="M:TowseyLibrary.NormalDist.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.NormalDist"/> class.
            CONSTRUCTOR for integer data.
            </summary>
        </member>
        <member name="M:TowseyLibrary.NormalDist.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.NormalDist"/> class.
            CONSTRUCTOR for real valued data.
            </summary>
        </member>
        <member name="M:TowseyLibrary.NormalDist.getBins">
            returns the histogram bins containing data distribution
            @return
        </member>
        <member name="M:TowseyLibrary.NormalDist.getSum(System.Int32[])">
            returns the sum of a set of integer values
            @param data
            @return
        </member>
        <member name="M:TowseyLibrary.NormalDist.AverageAndSD(System.Int32[],System.Double@,System.Double@)">
            returns the average and SD of a set of integer values
            @param data
            @return
        </member>
        <member name="M:TowseyLibrary.NormalDist.AverageAndSD(System.Double[],System.Double@,System.Double@)">
            returns the average and SD of a set of real values
            @param data
            @return
        </member>
        <member name="M:TowseyLibrary.NormalDist.AverageAndVariance(System.Double[],System.Double@,System.Double@)">
            returns the average and variance of a set of real values
            @param data
            @return
        </member>
        <member name="M:TowseyLibrary.NormalDist.Variance(System.Double,System.Double,System.Int32)">
            Variance = (av of squares) - (square of the average)
            i.e.  SS/n - mean^2
               =  SS/n - (sum/n)^2
               = (SS*n - sum^2)/n^2
            @param SumSq
            @param Sum
            @param count
            @return
        </member>
        <member name="M:TowseyLibrary.NormalDist.Values2Probabilities(System.Double[])">
            <summary>
            Converts an array of values (assumed to be a signal superimposed on Gaussian noise)
            to z-scores and then converts z-scores to probabilites.
            </summary>
            <param name="values">array of score values.</param>
            <returns>array of probability scores.</returns>
        </member>
        <member name="M:TowseyLibrary.NormalDist.getBinLimits(System.Double,System.Double)">
            returns the upper limit for each bin in a 16 bin histogram
            from an array of data given the data's
            average and standard deviation.
            @param data
            @param av
            @param SD
            @return
        </member>
        <member name="M:TowseyLibrary.NormalDist.get8binDistribution(System.Double[],System.Double,System.Double)">
            returns an 8 bin histogram from an array of data given the data's
            average and standard deviation.
            @param data
            @param av
            @param SD
            @return
        </member>
        <member name="M:TowseyLibrary.NormalDist.get16binDistribution(System.Double[],System.Double,System.Double)">
            returns a 16 bin histogram from an array of data given
            the data's average and standard deviation.
            The histogram is represented by a matrix of doubles.
            One row represents data in one bin.
            5 columns are: 1 upper bound of bin
                           2 midpoint of bin
                           3 absolute counts in bin
                           4 fraction of counts in bin
                           5 ln(fraction)
            @param data
            @param av
            @param SD
            @return
        </member>
        <member name="M:TowseyLibrary.NormalDist.zScore(System.Double,System.Double,System.Double)">
            returns the Z score (absolute value) of a value with reference to
            a normal distribution whose av and sd are as passed.
            @param value
            @param av
            @param sd
            @return
        </member>
        <member name="M:TowseyLibrary.Oblong.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.Oblong"/> class.
            CONSTRUCTOR.
            </summary>
            <param name="row1">
            </param>
            <param name="col1">
            </param>
            <param name="row2">
            </param>
            <param name="col2">
            </param>
        </member>
        <member name="M:TowseyLibrary.Oblong.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.ISet{SixLabors.ImageSharp.Point})">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.Oblong"/> class.
            CONSTRUCTOR.
            </summary>
            <param name="row1">
            </param>
            <param name="col1">
            </param>
            <param name="row2">
            </param>
            <param name="col2">
            </param>
        </member>
        <member name="P:TowseyLibrary.Oblong.ColCentroid">
            <summary>
                Gets location of Oblong's centre column in parent matrix.
            </summary>
        </member>
        <member name="P:TowseyLibrary.Oblong.ColumnLeft">
            <summary>
            Gets or sets the location of Oblong's left most column in parent matrix.
            </summary>
        </member>
        <member name="P:TowseyLibrary.Oblong.ColumnRight">
            <summary>
            Gets or sets the location of Oblong's right most column in parent matrix.
            </summary>
        </member>
        <member name="P:TowseyLibrary.Oblong.HitElements">
            <summary>
            Gets or sets the collection of points that form the perimeter of the oblong.
            </summary>
        </member>
        <member name="P:TowseyLibrary.Oblong.RowTop">
            <summary>
            Gets or sets the location of Oblong's top row in parent matrix.
            </summary>
        </member>
        <member name="P:TowseyLibrary.Oblong.RowBottom">
            <summary>
            Gets or sets the location of Oblong's bottom row in parent matrix.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Oblong.CategoryShapes(System.Collections.Generic.List{TowseyLibrary.Oblong},System.Int32[],System.Int32)">
            <summary>
            returns a list of shapes that represent the averages of shapes in each category dervied
                from FuzzyART clustering.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Oblong.Distribution(System.Collections.Generic.List{TowseyLibrary.Oblong},System.Int32)">
            <summary>
            Reurns the distribution of the column-centroids.
                The rectangular shapes are assumed to exist in a matrix
                whose rows are time frames and whose columns are freq bins.
                The returned distribution is therefore over freq domain.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Oblong.ShapesDetect(System.Double[0:,0:])">
            <summary>
            assume that the input matrix is purely binary, i.e. zeros and ones.
            </summary>
            <param name="matrix">
            </param>
            <returns>
            The <see cref="T:System.Collections.ArrayList"/>.
            </returns>
        </member>
        <member name="M:TowseyLibrary.Oblong.Main">
            <summary>
            MAIN METHOD FOR UNIT TESTING.
            </summary>
        </member>
        <member name="T:TowseyLibrary.OtsuThresholder">
            <summary>
            Go to following link for info on Otsu threshold
            http://www.labbookpages.co.uk/software/imgProc/otsuThreshold.html.
            </summary>
        </member>
        <member name="M:TowseyLibrary.OtsuThresholder.Execute(TowseyLibrary.OtsuThresholder.Arguments)">
             <summary>
            
             </summary>
        </member>
        <member name="M:TowseyLibrary.OtsuThresholder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.OtsuThresholder"/> class.
            CONSTRUCTOR.
            </summary>
        </member>
        <member name="M:TowseyLibrary.OtsuThresholder.DoLocalOtsuThresholding(System.Double[0:,0:],System.Byte[0:,0:]@)">
            <summary>
            </summary>
            <param name="m">The spectral sonogram passes as matrix of doubles.</param>
        </member>
        <member name="T:TowseyLibrary.Plot">
            <summary>
            Represents a single array of data with X and Y scales and other info useful for plotting a graph.
            Was first used to represent a track of scores at the bottom of a sonogram image.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Plot.PreparePlot(System.Double[],System.String,System.Double)">
            <summary>
            Prepares a plot of an array of score values.
            To obtain a more useful display, the maximum display value is set to 3 times the threshold value.
            </summary>
            <param name="array">an array of double.</param>
            <param name="title">to accompany the plot.</param>
            <param name="threshold">A threshold value to be drawn on the plot.</param>
            <returns>the plot.</returns>
        </member>
        <member name="M:TowseyLibrary.Plot.DrawPlot(System.Int32)">
            <summary>
            Assumes that the data has been normalised by a call to plot.NormalizeData(double min, double max) or equivalent.
            </summary>
            <param name="height">height of the plot.</param>
        </member>
        <member name="M:TowseyLibrary.PolarCoordinates.GetPolarCoordinates(System.Int32,System.Int32,System.Double,System.Int32)">
             <summary>
            
             </summary>
             <param name="Ox">X coordinate of origin.</param>
             <param name="Oy">Y coordinate of origin.</param>
             <param name="theta">the angle in radians.</param>
             <param name="distance">the distance as integer.</param>
        </member>
        <member name="T:TowseyLibrary.PulseTrain">
            <summary>
            This class was an attempt to detect pulse trains as an alternative to using the Oscillation recognition methods.
            It did not work effectively so discontinued the idea and have commented out the three methods.
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomNumber.GetDouble">
            <summary>
            returns a random number between 0.0 and 1.0.
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomNumber.GetInt(System.Int32)">
            <summary>
            generates numbers 0 to max-1.
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomNumber.GetRandomPercent">
            <summary>
            generates numbers 1 - 100.
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomNumber.RandomizeNumberOrder(System.Int32,System.Int32)">
            <summary>
            Returns integers up to N in random order.
            Use of seed will always return the same order.
            Pass a negative seed value to ignore it and to have a different random order every time method called.
            Use this method if you want random numbers up to N without replacement.
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomNumber.RandomizeArray(System.Int32[],System.Int32)">
            <summary>
            IMPORTANT - THIS METHOD NEEDS WORK!!
            returns the passed array but with the elements in a random order
            see method above which was originally written for FuzzyART in 1995.
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomNumber.RandomizeArray(System.Double[],System.Int32)">
            <summary>
            returns the passed array but with the elements in a random order
            see method above which was originally written for FuzzyART in 1995.
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomNumber.RandomNumbersWithoutReplacement(System.Int32,System.Int32)">
            <summary>
            Returns N random integers between 0 - K-1 without replacement.
            If seed is negative, it will be ignored ie different random order every time method called.
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomNumber.GetRandomVector(System.Int32,TowseyLibrary.RandomNumber)">
            <summary>
            generates a vector of random numbers in [0, 1.0].
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomNumber.GetRandomDistancesInEuclidianSpace(System.Int32,System.Int32)">
            <summary>
            generates numbers 1 - 100.
            </summary>
        </member>
        <member name="T:TowseyLibrary.RandomVariable">
             @author towsey
            
             generates numbers according to a gaussian distribution
        </member>
        <member name="M:TowseyLibrary.RandomVariable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.RandomVariable"/> class.
            CONSTRUCTOR.
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomVariable.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.RandomVariable"/> class.
            CONSTRUCTOR.
            </summary>
        </member>
        <member name="M:TowseyLibrary.RandomVariable.getMean">
            @return Returns the mean.
        </member>
        <member name="M:TowseyLibrary.RandomVariable.setMean(System.Double)">
            @param mean The mean to set.
        </member>
        <member name="M:TowseyLibrary.RandomVariable.getSD">
            @return Returns the sD.
        </member>
        <member name="M:TowseyLibrary.RandomVariable.setSD(System.Double)">
            @param sd The sD to set.
        </member>
        <member name="T:TowseyLibrary.Statistics">
            <summary>
            consists of a set of static methods to do elementary statistics
            NOTE: Much of stats to do with a normal distribution is in the NormDist CLASS.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Statistics.GetPercentileValue(System.Double[],System.Int32)">
            <summary>
            NOTE: The sort routine sorts in descending order.
            Therefore the percentile value has to be reversed.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Statistics.AnalyzeClustersOfHits(System.Int32[],System.Int32,System.Double,System.Int32,System.Double[]@,System.Double@,System.Double@)">
            <summary>
            Analyzes an array of events or hits, represented by a binary of matrix.
            Assumes a Poisson distribution
            Returns an array of Z-scores indicating the probability at any time or frame that the number of hits occuring
            in the window centered on that point could have occured by chance.
            </summary>
        </member>
        <member name="M:TowseyLibrary.Statistics.tStatistic(System.Double,System.Double,System.Int32,System.Double,System.Double,System.Int32)">
            Calculates the t-statistic.
            t(df) = (m1-m2)/SE
            where SE^2 = s^2(m+n)/(mn)
            where s^2 = estimated variance = ((ColumnLeft-1)v1 + (ColumnRight-1)v2)/(ColumnLeft+ColumnRight-2)
            where v1 = sd1^2 and v2 =  sd2^2
            To calculate ASSUME df = ColumnLeft+ColumnRight-2 = infinity
            @param m1
            @param sd1
            @param count1
            @param m2
            @param sd2
            @param count2
            @return
        </member>
        <member name="M:TowseyLibrary.Statistics.TestGetNthPercentileBin">
            <summary>
            This method is a test for ensuring correct bin ID is chosen for some degenerate cases.
            </summary>
        </member>
        <member name="P:TowseyLibrary.StructureTensor.RidgeTensorResult.AvMagnitude">
            <summary>
            Gets or sets average of gradient magnitudes on left and right side of ridge.
            </summary>
        </member>
        <member name="P:TowseyLibrary.StructureTensor.RidgeTensorResult.AvRadians">
            <summary>
            Gets or sets average of gradient directions on left and right side of ridge.
            </summary>
        </member>
        <member name="P:TowseyLibrary.StructureTensor.RidgeTensorResult.RidgeDirection">
            <summary>
            Gets or sets ridge direction (in radians) derived fomr average of left and right gradient directions.
            </summary>
        </member>
        <member name="P:TowseyLibrary.StructureTensor.RidgeTensorResult.DirectionDifference">
            <summary>
            Gets or sets difference in gradient directions (in radians) on left and right side of ridge.
            </summary>
        </member>
        <member name="P:TowseyLibrary.StructureTensor.RidgeTensorResult.RidgeDirectionCategory">
            <summary>
            Gets or sets ridge direction category i.e. vertical, horozontal, pos and neg 45 degrees.
            0=not a ridge; 1=horizontal; 2=+45 degrees; 3= -45 degrees; 4=vertical.
            </summary>
        </member>
        <member name="P:TowseyLibrary.StructureTensor.RidgeTensorResult.AvDominance">
            <summary>
            Gets or sets average of the eigen vector dominances.
            </summary>
        </member>
        <member name="M:TowseyLibrary.StructureTensor.GetStructureTensorInfo(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            CONSTRUCTOR
            Pass both the original image and structure tensor because need to calculate derivatives as well as eigenvalues.
            Cannot easily derive the partial derivatives from the structure tensor because have lost the sign info.
            </summary>
        </member>
        <member name="M:TowseyLibrary.StructureTensor.Test2StructureTensor">
            <summary>
             used to test ridge detection using structure tensor.
            </summary>
        </member>
        <member name="T:TowseyLibrary.SvdAndPca">
             <summary>
             contains methods and test example to do Singular Value decomposition and Principal Components Analysis
            
             IMPORTANT NOTE: The underlying storage of the Matrix class is a one dimensional array in column-major order (column by column).
                             NOT Row by row!!.
            
            
             </summary>
        </member>
        <member name="M:TowseyLibrary.SvdAndPca.SingularValueDecompositionVector(System.Double[0:,0:])">
             <summary>
             The singular value decomposition of an M by N rectangular matrix A has the form
                    A(mxn) = U(mxm) * S(mxn) * V'(nxn)
             where
                 U is an orthogonal matrix, whose columns are the left singular vectors;
                 S is a diagonal matrix, whose min(m,n) diagonal entries are the singular values;
                 V is an orthogonal matrix, whose columns are the right singular vectors;
                 Note 1: the transpose of V is used in the decomposition, and that the diagonal matrix S is typically stored as a vector.
                 Note 2: the values on the diagonal of S are the square-root of the eigenvalues.
            
             THESE TWO METHODS HAVE BEEN TESTED ON TOY EXAMPLES AND returned correct values.
             </summary>
        </member>
        <member name="M:TowseyLibrary.SvdAndPca.EigenVectors(System.Double[0:,0:])">
            <summary>
            returns the eigen values and eigen vectors of a matrix
            IMPORTANT: THIS METHOD NEEDS DEBUGGING.
            IT RETURNS THE NEGATIVE VALUES OF THE EIGEN VECTORS ON A TOY EXMAPLE
                            double[,] matrix = {
                                           { 3.0, -1.0 },
                                           { -1.0, 3.0 }
                                       };
            eigen values are correct ie, 2.0, 4.0; but in the wrong order.
            </summary>
        </member>
        <member name="M:TowseyLibrary.SvdAndPca.ExampleOfSVD_3">
            <summary>
            These examples are used to do Wavelet Packet Decomposition and then do SVD on the returned WPD trees.
            </summary>
        </member>
        <member name="M:TowseyLibrary.TemporalMatrix.#ctor(System.String,System.Double[0:,0:],System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.TemporalMatrix"/> class.
            CONSTRUCTOR.
            </summary>
        </member>
        <member name="M:TowseyLibrary.TemporalMatrix.SwapTemporalDimension">
            <summary>
            changes temporal dimension from rows to columns or vice-versa.
            </summary>
        </member>
        <member name="M:TowseyLibrary.TemporalMatrix.CompressFrameSpectrograms(System.Double[0:,0:],System.Int32)">
            <summary>
            This method assumes that the matrix spectrograms are oriented so that the rows = spectra
            and the columns = freq bins, i.e. rotated 90 degrees from normal orientation.
            </summary>
        </member>
        <member name="M:TowseyLibrary.TernaryPlots.DrawTernaryPlot(System.Collections.Generic.Dictionary{System.String,System.Double[0:,0:]},System.String[])">
            <summary>
            Draws a ternary plot from the passed data.
            Assumes that the passed matrix values are all normalised in [0,1].
            </summary>
            <param name="matrixDictionary">dicitonary of matrices - each matrix is one index.</param>
            <param name="keys">The names of the three indices/attributes. Also used as keys to dicitonary of matrices.</param>
        </member>
        <member name="T:TowseyLibrary.TestTools">
            <summary>
            This class was written when I was starting to do DIY Unit tests.
            It should be depracated but is still being referenced.
            I am now using the you-beaut Unit testing tools provided by VS.
            </summary>
        </member>
        <member name="M:TowseyLibrary.TestTools.CompareArrayWithBenchmark(System.String,System.Double[],System.IO.FileInfo)">
            <summary>
            This test checks a score array (array of doubles) against a standard or benchmark previously stored.
            </summary>
        </member>
        <member name="M:TowseyLibrary.TestTools.FileEqualityTest(System.String,System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            This test checks two text/csv files to determine if they are the same.
            </summary>
        </member>
        <member name="T:TowseyLibrary.TextUtilities">
            <p>Title: Miscellaneous Text Processing Utilities.</p>
            <p>Description: Collection of miscellaneous tools for processing text.
            All the methods are STATIC.
            </p>
            @author Michael Towsey
            @version 1.0
        </member>
        <member name="M:TowseyLibrary.TextUtilities.#ctor">
            a do nothing constructor - all methods are static
        </member>
        <member name="M:TowseyLibrary.TextUtilities.GetNgrams(System.String,System.Int32)">
            <summary>
            returns a dictionary of counts of character N-grams in a string.
            </summary>
        </member>
        <member name="M:TowseyLibrary.TextUtilities.Minimum(System.Int32,System.Int32,System.Int32)">
            Returns the minimum of three values.
            @param a first value
            @param b second value
            @param c third value
            @return the minimum of the three
        </member>
        <member name="M:TowseyLibrary.TextUtilities.LD(System.String,System.String)">
            Computes the Levenshtein edit distance between two strings.
            i.e. the number of discrete character edits that must be made to convert
            one string into another.
            @param s the source string
            @param t the target string
            @return the Int32 edit distance
        </member>
        <member name="M:TowseyLibrary.TextUtilities.getWordsAfter(System.Int32,System.Int32,System.String)">
            returns a vector of the N words that occur AFTER the given geneStart position.
            if the geneStart position is inside a word, then first move to the geneEnd of
                                                    the word before starting to count.
            exit at any time the index position reaches geneEnd of the document
            @param N the number of words
            @param geneStart the search geneStart position
            @param text the text to be searched
            @return the vector of words as strings
        </member>
        <member name="M:TowseyLibrary.TextUtilities.getWordsBefore(System.Int32,System.Int32,System.String)">
            returns a vector of the N words that occur BEFORE the given geneStart position.
            if the geneStart position is inside a word, then first move to the geneStart of
                                                    the word before starting to count backwards.
            exit at any time the index position reaches geneStart of the document
            NOTE: the words will be added to the vector in reverse order.
            @param N the number of words
            @param geneStart the search geneStart position
            @param text the text to be searched
            @return the vector of words as strings
        </member>
        <member name="M:TowseyLibrary.TextUtilities.removeFirstWord(System.String)">
             Finds sentence boundaries using the BreakIterator class.
             However its algorithm is primitive.
             For example, it puts breaks inside "the 21. January" and "Mr. Bean".
             This algorithm needs additional support depending on language.
             Could use a list of abbreviations which DO NOT geneEnd a sentence.
            
             @param text - document containing sentences
             @param locale - language of the document
             @return an Nx2 matrix of Int32s marking sentence bounds
        </member>
        <member name="M:TowseyLibrary.TextUtilities.StringContainsChar(System.String,System.Char)">
            
             @param str
             @param ch
             @return
        </member>
        <member name="M:TowseyLibrary.TextUtilities.getWordsInNeighbourhood(System.Int32,System.Int32,System.Int32,System.String)">
            This method returns the N words before 'geneStart' and the N words after 'geneEnd'
            @param N the number of words the before and after neighbourhoods
            @param geneStart the right bound of the BEFORE neighbourhood
            @param geneEnd   the left  bound of the AFTER  neighbourhood
            @param text the text to be processed
            @return a matrix of words, BEFORE words in row1, AFTER words in row2
        </member>
        <member name="M:TowseyLibrary.TextUtilities.getNeighbourhoodBefore(System.Int32,System.Int32,System.String)">
            NOTE: this method is similar to the getWordsBefore() method but it returns
             an index position rather than the words themselves.
            @param N
            @param geneStart
            @param text
            @return index position where the first of the N words starts.
        </member>
        <member name="M:TowseyLibrary.TextUtilities.getNeighbourhoodAfter(System.Int32,System.Int32,System.String)">
            NOTE: this method is similar to the getWordsAfter() method but it returns
             an index position rather than the words themselves.
            @param N
            @param geneStart position
            @param text
            @return index position where the last of the N words ends.
        </member>
        <member name="M:TowseyLibrary.TextUtilities.getWordIndex(System.Int32,System.Int32[0:,0:])">
            Returns index of word that contains the Nth char
            NOTE: if N is between two words, the first word will be taken as the target or focal word
            NOTE: if N is &lt;= 0, the first word is returned.
            NOTE: if N > document mapLength, then the last word is returned.
            @param N the character index
            @param wordLoc - array of word bounds
            @return - the required index into the word array.
        </member>
        <member name="M:TowseyLibrary.TextUtilities.main(System.String[])">
            This method gets the frequency of every word type in the passed text.
            This method is called by AutoTag and by various JUnit tests. It is NOT called by
            TextDoc.CalculateWordStatistics() because that method does extra work.
            But the algorithm is same in both methods.
            @param text
            @param locale
            @return HashMap containing word frequencies.
        </member>
        <member name="T:TowseyLibrary.WaveletPacketDecomposition">
            <summary>
            An implementation of wavelet pack decomposition (WPD) using the Haar wavelet.
            For details on the Haar wavelet, and the source for the details in this code,
            read "WAVELETS FOR KIDS, A Tutorial Introduction", by Brani Vidakovic and Peter Mueller, Duke University.
            WARNING: This article on the Haar wavelet is NOT for kids!.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.WaveletPacketDecomposition"/> class.
            Assume the signal is power of 2 in length.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.GetWPDSignalTree">
            <summary>
            assume tree is full decomposed WPD tree.
            Assume original signal is power of 2 in length.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.GetWPDEnergyVector">
            <summary>
            assume tree is full decomposed WPD tree.
            Assume original signal is power of 2 in length.
            </summary>
        </member>
        <member name="T:TowseyLibrary.WaveletPacketDecomposition.BinVector">
            <summary>
            Represents a single node in the WPD tree.
            THe nodes are usually called "bin vectors".
            At the bottom of the WPD tree each bin vector contains only one element.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.GetTreeOfBinVectors(System.Double[])">
             <summary>
            
             </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.GetTreeOfBinVectors(System.Collections.Generic.List{TowseyLibrary.WaveletPacketDecomposition.BinVector},TowseyLibrary.WaveletPacketDecomposition.BinVector)">
            <summary>
            NOTE: THIS METHOD IS RECURSIVE.
            It performs a depth first calculation of the wavelet coefficients.
            Depth first search terminates when the bin vector contains only one element.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.GetFrequencyByOscillationsMatrix(System.Double[],System.Int32,System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.CalculateUniversalThreshold(System.Int32,System.Double[])">
            <summary>
            Returns a universal threshold which is used to zero small or insignificant wavelet coefficients.
            See pages 15 &amp; 16 of "Wavelets for kids"!!
            The coefficients should be derived from the bottom row of the WPD tree.
            I think n = the level number of the coefficients being thresholded.
            In other words, the standard deviation is calculated from the bottom row of coeficients but is increased for the higher rows.
            THis is because the coefficients in the lower rows have a lower SNR.
            </summary>
            <param name="n">level number.</param>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.GetWPDSpectralSequence(System.Double[],System.Int32)">
            <summary>
            Returns a matrix whose columns consist of the bottom row of the WPD tree for each WPD window of length 2^L where L= levelNumber.
            The WPD windows do not overlap.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.GetWPDEnergySequence(System.Double[],System.Int32)">
            <summary>
            Returns a matrix whose columns consist of the energy vector derived from the WPD tree for each WPD window of length 2^L where L= levelNumber.
            The WPD windows do not overlap.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.LowPassAndDecimate(System.Double[])">
            <summary>
            implements the Haar low pass filter.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.HiPassAndDecimate(System.Double[])">
            <summary>
            implements the Haar high pass filter.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletPacketDecomposition.ExampleOfWavelets_1">
            <summary>
            These examples are used to do Wavelet Packet Decomposition on test signals to which noise can be added.
            </summary>
        </member>
        <member name="T:TowseyLibrary.WaveletTransformContinuous">
            <summary>
            An implementation of Continuous Wavelet Transform (CWT) using the Haar wavelet.
            For details on the Haar wavelet, and the source for the details in this code,
            read "WAVELETS FOR KIDS, A Tutorial Introduction", by Brani Vidakovic and Peter Mueller, Duke University.
            WARNING: This article on the Haar wavelet is NOT for kids!.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletTransformContinuous.#ctor(System.Double[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TowseyLibrary.WaveletTransformContinuous"/> class.
            The signal can be any length. Need not be power of 2 in length.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletTransformContinuous.GetFrequencyByOscillationsMatrix(System.Double[],System.Int32,System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletTransformContinuous.LowPassAndDecimate(System.Double[])">
            <summary>
            implements the Haar low pass filter.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletTransformContinuous.HiPassAndDecimate(System.Double[])">
            <summary>
            implements the Haar high pass filter.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletTransformContinuous.ExampleOfWavelets_1">
            <summary>
            These examples are used to do Wavelet Packet Decomposition on test signals to which noise can be added.
            </summary>
        </member>
        <member name="M:TowseyLibrary.WaveletTransformContinuous.GetWaveletCoefficients(System.Double[])">
            <summary>
            The wavelet coefficients are derived by reversing the order of the scaling function coefficients and then reversing the sign of every second one,
            (i.e., D4 wavelet = {-0.1830127, -0.3169873, 1.1830127, -0.6830127}).
            Mathematically, this looks like b_k = (-1)^{k} a_{N - 1 - k}
            where
                k is the coefficient index,
                b is a coefficient of the wavelet sequence and a a coefficient of the scaling sequence.
                N is the wavelet index, i.e., 2 for D2.
            </summary>
        </member>
        <member name="T:AForge.Imaging.Filters.BaseUsingCopyPartialFilter">
             <summary>
             Base class for filters, which require source image backup to make them applicable to
             source image (or its part) directly.
             </summary>
            
             <remarks><para>The base class is used for filters, which can not do
             direct manipulations with source image. To make effect of in-place filtering,
             these filters create a background copy of the original image (done by this
             base class) and then do manipulations with it putting result back to the original
             source image.</para>
            
             <para><note>The background copy of the source image is created only in the case of in-place
             filtering. Otherwise background copy is not created - source image is processed and result is
             put to destination image.</note></para>
            
             <para>The base class is for those filters, which support as filtering entire image, as
             partial filtering of specified rectangle only.</para>
             </remarks>
            
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.Apply(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgb24})">
             <summary>
             Apply filter to an image.
             </summary>
            
             <param name="imageData">Source image to apply filter to.</param>
            
             <returns>Returns filter's result obtained by applying the filter to
             the source image.</returns>
            
             <remarks>
             The filter accepts bitmap data as input and returns the result
             of image processing filter as new image. The source image data are kept
             unchanged.
             </remarks>
        </member>
        <member name="M:AForge.Imaging.Filters.BaseUsingCopyPartialFilter.ProcessFilter(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgb24},SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.L8},SixLabors.ImageSharp.Rectangle)">
             <summary>
             Process the filter on the specified image.
             </summary>
            
             <param name="sourceData">Source image data.</param>
             <param name="destinationData">Destination image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
        <member name="T:AForge.Imaging.Filters.CannyEdgeDetector">
             <summary>
             Canny edge detector.
             </summary>
            
             <remarks><para>The filter searches for objects' edges by applying Canny edge detector.
             The implementation follows
             <a href="http://www.pages.drexel.edu/~weg22/can_tut.html">Bill Green's Canny edge detection tutorial</a>.</para>
            
             <para><note>The implemented canny edge detector has one difference with the above linked algorithm.
             The difference is in hysteresis step, which is a bit simplified (getting faster as a result). On the
             hysteresis step each pixel is compared with two threshold values: <see cref="P:AForge.Imaging.Filters.CannyEdgeDetector.HighThreshold"/> and
             <see cref="P:AForge.Imaging.Filters.CannyEdgeDetector.LowThreshold"/>. If pixel's value is greater or equal to <see cref="P:AForge.Imaging.Filters.CannyEdgeDetector.HighThreshold"/>, then
             it is kept as edge pixel. If pixel's value is greater or equal to <see cref="P:AForge.Imaging.Filters.CannyEdgeDetector.LowThreshold"/>, then
             it is kept as edge pixel only if there is at least one neighbouring pixel (8 neighbours are checked) which
             has value greater or equal to <see cref="P:AForge.Imaging.Filters.CannyEdgeDetector.HighThreshold"/>; otherwise it is none edge pixel. In the case
             if pixel's value is less than <see cref="P:AForge.Imaging.Filters.CannyEdgeDetector.LowThreshold"/>, then it is marked as none edge immediately.
             </note></para>
            
             <para>The filter accepts 8 bpp grayscale images for processing.</para>
            
             <para>Sample usage:</para>
             <code>
             // create filter
             CannyEdgeDetector filter = new CannyEdgeDetector( );
             // apply the filter
             filter.ApplyInPlace( image );
             </code>
            
             <para>
             See the original AForge code for example images.
             </para>
             </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CannyEdgeDetector.LowThreshold">
             <summary>
             Gets or sets low threshold.
             </summary>
            
             <remarks><para>Low threshold value used for hysteresis
             (see  <a href="http://www.pages.drexel.edu/~weg22/can_tut.html">tutorial</a>
             for more information).</para>
            
             <para>Default value is set to <b>20</b>.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CannyEdgeDetector.HighThreshold">
             <summary>
             Gets or sets high threshold.
             </summary>
            
             <remarks><para>High threshold value used for hysteresis
             (see  <a href="http://www.pages.drexel.edu/~weg22/can_tut.html">tutorial</a>
             for more information).</para>
            
             <para>Default value is set to <b>100</b>.</para>
             </remarks>
            
        </member>
        <member name="P:AForge.Imaging.Filters.CannyEdgeDetector.GaussianSigma">
            <summary>
            Gets gaussian sigma.
            </summary>
        </member>
        <member name="P:AForge.Imaging.Filters.CannyEdgeDetector.GaussianSize">
            <summary>
            Gets gaussian size.
            </summary>
        </member>
        <member name="M:AForge.Imaging.Filters.CannyEdgeDetector.#ctor(System.Single,System.Nullable{System.Int32})">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CannyEdgeDetector"/> class.
             </summary>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CannyEdgeDetector.#ctor(System.Byte,System.Byte)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CannyEdgeDetector"/> class.
             </summary>
            
             <param name="lowThreshold">Low threshold.</param>
             <param name="highThreshold">High threshold.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CannyEdgeDetector.#ctor(System.Byte,System.Byte,System.Single,System.Int32)">
             <summary>
             Initializes a new instance of the <see cref="T:AForge.Imaging.Filters.CannyEdgeDetector"/> class.
             </summary>
            
             <param name="lowThreshold">Low threshold.</param>
             <param name="highThreshold">High threshold.</param>
             <param name="sigma">Gaussian sigma.</param>
            
        </member>
        <member name="M:AForge.Imaging.Filters.CannyEdgeDetector.ProcessFilter(SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.Rgb24},SixLabors.ImageSharp.Image{SixLabors.ImageSharp.PixelFormats.L8},SixLabors.ImageSharp.Rectangle)">
             <summary>
             Process the filter on the specified image.
             </summary>
            
             <param name="source">Source image data.</param>
             <param name="destination">Destination image data.</param>
             <param name="rect">Image rectangle for processing by the filter.</param>
            
        </member>
    </members>
</doc>
