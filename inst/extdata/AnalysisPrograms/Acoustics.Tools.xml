<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Acoustics.Tools</name>
    </assembly>
    <members>
        <member name="T:Acoustics.Tools.AudioFilePreparer">
            <summary>
            The audio file preparer.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.AudioFilePreparer.PrepareFile(System.IO.DirectoryInfo,System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Prepare an audio file. This will be a single segment of a larger audio file, modified based on the analysisSettings.
            </summary>
            <param name="outputDirectory">
            The analysis Base Directory.
            </param>
            <param name="source">
            The source audio file.
            </param>
            <param name="outputMediaType">
            The output Media Type.
            </param>
            <param name="request">
            The request.
            </param>
            <returns>
            The prepared file.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.AudioFilePreparer.PrepareFile(System.IO.FileInfo,System.IO.FileInfo,Acoustics.Tools.AudioUtilityRequest,System.IO.DirectoryInfo)">
            <summary>
            The prepare file.
            </summary>
            <param name="request">
              The request.
            </param>
        </member>
        <member name="M:Acoustics.Tools.AudioFilePreparer.DivideEvenly(System.Int64,System.Int64)">
            <summary>
            Divide a value (numerator) by a segment value (denominator)
            to get segments of as equal size as possible.
            </summary>
            <param name="numerator">
            The numerator.
            </param>
            <param name="denominator">
            The denominator.
            </param>
            <returns>
            Segment start points.
            </returns>
            <remarks>
            from: http://stackoverflow.com/a/577451/31567
            This doesn't try to cope with negative numbers :).
            </remarks>
        </member>
        <member name="M:Acoustics.Tools.AudioFilePreparer.DivideExactLeaveLeftoversAtEnd(System.Int64,System.Int64)">
            <summary>
            Divide a value (numerator) by a segment value (denominator)
            to get segments of exactly denominator in size, and the leftovers at the end.
            </summary>
            <param name="numerator">
            The numerator.
            </param>
            <param name="denominator">
            The denominator.
            </param>
            <returns>
            Segment start points.
            </returns>
        </member>
        <member name="T:Acoustics.Tools.AudioReadingRequest">
            <summary>
            Audio Reading Request.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioReadingRequest.Start">
            <summary>
            Gets or sets the start time relative to the start of the audio reading.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioReadingRequest.End">
            <summary>
            Gets or sets the end time relative to the start of the audio reading.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioReadingRequest.MediaType">
            <summary>
            Gets or sets the target media type.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioReadingRequest.SampleRate">
            <summary>
            Gets or sets the target Sample Rate.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioReadingRequest.Channels">
            <summary>
            Gets or sets the target number of Channels.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.AudioReadingRequest.Validate">
            <summary>
            Validate this Audio Reading Request.
            </summary>
            <returns>
            True if valid, otherwise false.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.AudioReadingRequest.ToString">
            <summary>
            Get a string representation of this audio reading request.
            </summary>
            <returns>
            String representation.
            </returns>
        </member>
        <member name="T:Acoustics.Tools.AudioUtilityInfo">
            <summary>
            Audio file Info from Utility.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.AudioUtilityInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.AudioUtilityInfo"/> class.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityInfo.SourceFile">
            <summary>
            Gets or sets the source file.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityInfo.SampleRate">
            <summary>
            Gets or sets the Sample Rate in hertz.
            stream:sample_rate.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityInfo.BitsPerSecond">
            <summary>
            Gets or sets the bits per second (bits/second).
            format:bit_rate.
            NOTE: this is the format bit rate which includes the header.
            For very short files this will be signficantly different from the theoretical bit rate
            because averaging the value over many seconds will eventually smooth out the extra bits in
            the first frame so that the average bit rate approaches the theoretical bit rate.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityInfo.BitsPerSample">
            <summary>
            Gets or sets the bits per sample.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityInfo.ChannelCount">
            <summary>
            Gets or sets the number of channels.
            stream:channels.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityInfo.Duration">
            <summary>
            Gets or sets the duration.
            format:duration.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityInfo.MediaType">
            <summary>
            Gets or sets the media type.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityInfo.RawData">
            <summary>
            Gets or sets the raw data.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.AudioUtilityInfo.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="T:Acoustics.Tools.AudioUtilityModifiedInfo">
            <summary>
            The audio utility modified info.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityModifiedInfo.SourceInfo">
            <summary>
            Gets or sets the source info. This is the file info before it was modified.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityModifiedInfo.TargetInfo">
            <summary>
            Gets or sets the target info. This is the file info after is was modified.
            </summary>
        </member>
        <member name="T:Acoustics.Tools.AudioUtilityRequest">
            <summary>
            Audio Utility request.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityRequest.OffsetStart">
            <summary>
            Gets or sets the offset start.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityRequest.OffsetEnd">
            <summary>
            Gets or sets the offset end.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityRequest.TargetSampleRate">
            <summary>
            Gets or sets the target Sample Rate in hertz.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityRequest.BitDepth">
            <summary>
            Gets or sets the bit depth. Valid values = 8, 16, 24, 32.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityRequest.Channels">
            <summary>
            Gets or sets the target channel numbers (eg. 1,2,3,{1,2},{1,2,3,4} ... ).
            Channels are 1-indexed!.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityRequest.MixDownToMono">
            <summary>
            Gets or sets a value indicating whether to mix down to mono.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityRequest.BandpassLow">
            <summary>
            Gets or sets the bandpass low.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityRequest.BandpassHigh">
            <summary>
            Gets or sets the bandpass high.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.AudioUtilityRequest.BandPassType">
            <summary>
            Gets or sets the band pass type.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.AudioUtilityRequest.Validate">
            <summary>
            Validate this Audio Reading Request.
            </summary>
            <returns>
            True if valid, otherwise false.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.AudioUtilityRequest.ValidateChecked">
            <summary>
            The validate checked. Throws exception if validation fails.
            </summary>
            <returns>
            True if valid, otherwise false.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.AudioUtilityRequest.ToString">
            <summary>
            Get a string representation of this audio reading request.
            </summary>
            <returns>
            String representation.
            </returns>
        </member>
        <member name="F:Acoustics.Tools.BandPassType.Sinc">
            <summary>
            Sinc kaiser-windowed low / high / band pass filter.
            Very high attenuation. Steep shoulders.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.BandPassType.Bandpass">
            <summary>
            Two-pole butterworth band-pass, dropping off at 3dB per octave.
            </summary>
        </member>
        <member name="T:Acoustics.Tools.Audio.AbstractAudioUtility">
            <summary>
            Abstract audio utility that contains common functionality.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.AbstractAudioUtility.ExecutableModify">
            <summary>
            The executable modify.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.AbstractAudioUtility.ExecutableInfo">
            <summary>
            The executable info.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.AbstractAudioUtility.TemporaryFilesDirectory">
            <summary>
            Directory for temporary files.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.AbstractAudioUtility.ValidSourceMediaTypes">
            <summary>
            Gets the valid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.AbstractAudioUtility.InvalidSourceMediaTypes">
            <summary>
            Gets the invalid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.AbstractAudioUtility.ValidOutputMediaTypes">
            <summary>
            Gets the valid output media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.AbstractAudioUtility.InvalidOutputMediaTypes">
            <summary>
            Gets the invalid output media types.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractAudioUtility.Modify(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            Segment a <paramref name="source"/> audio file.
            <paramref name="output"/> file will be created.
            </summary>
            <param name="source">
            The <paramref name="source"/> audio file.
            </param>
            <param name="sourceMediaType">
            The <paramref name="source"/> Mime Type.
            </param>
            <param name="output">
            The <paramref name="output"/> audio file. Ensure the file does not exist.
            </param>
            <param name="outputMediaType">
            The <paramref name="output"/> Mime Type.
            </param>
            <param name="request">
            The segment <paramref name="request"/>.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractAudioUtility.Info(System.IO.FileInfo)">
            <summary>
            Get meta data for the given file.
            </summary>
            <param name="source">File to get meta data from. This should be an audio file.</param>
            <returns>A dictionary containing meta data for the given file.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractAudioUtility.ConstructModifyArgs(System.IO.FileInfo,System.IO.FileInfo,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The construct modify args.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="request">
            The request.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractAudioUtility.ConstructInfoArgs(System.IO.FileInfo)">
            <summary>
            The construct info args.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractAudioUtility.GetInfo(System.IO.FileInfo,Acoustics.Shared.ProcessRunner)">
            <summary>
            The get info.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="process">
            The process.
            </param>
            <returns>
            The Acoustics.Tools.AudioUtilityInfo.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractAudioUtility.CheckRequestValid(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The check audioutility request.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="sourceMediaType">
            The source Media Type.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="outputMediaType">
            The output media type.
            </param>
            <param name="request">
            The request.
            </param>
        </member>
        <member name="F:Acoustics.Tools.Audio.AbstractSpectrogramUtility.TemporaryFilesDirectory">
            <summary>
            Directory for temporary files.
            </summary>
        </member>
        <member name="T:Acoustics.Tools.Audio.AbstractUtility">
            <summary>
            Base abstract class for all audio and spectrogram utilities.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.AbstractUtility.Log">
            <summary>
            Provides logging.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.AbstractUtility.MimeTypeExtensionErrorFormatString">
            <summary>
            Format string for mime type and extension mis-match.
            Params: Mimetype, extension.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.AbstractUtility"/> class.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.AbstractUtility.ProcessRunnerMaxRetries">
            <summary>
            Gets or sets ProcessRunnerMaxRetries.
            The maximum number of times a process will attempt a retry after a failure.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.AbstractUtility.ProcessRunnerTimeout">
            <summary>
            Gets or sets ProcessRunnerTimeout. That is, how long to wait for a running executable to finish.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.CheckMimeTypeExtension(System.IO.FileInfo,System.String)">
            <summary>
            Check that mime type and extension match.
            </summary>
            <param name="file">
            The audio file.
            </param>
            <param name="mimeType">
            The mime Type.
            </param>
            <exception cref="T:System.ArgumentException">
            <c>ArgumentException</c>.
            </exception>
            <returns>
            True if mime type and extension match, otherwise false.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.ValidateMimeTypeExtension(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String)">
            <summary>
            Validate to ensure that mime type and file extension match for source and output.
            </summary>
            <param name="source">
            The source audio file.
            </param>
            <param name="sourceMimeType">
            The source Mime Type.
            </param>
            <param name="output">
            The output audio file.
            </param>
            <param name="outputMimeType">
            The output Mime Type.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.ValidateMimeTypeExtension(System.IO.FileInfo,System.String)">
            <summary>
            Validate to ensure that mime type and file extension match.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="sourceMimeType">
            The source mime type.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.CanProcess(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Check if a file can be processed.
            </summary>
            <param name="file">
            The file to check.
            </param>
            <param name="validMediaTypes">
            The valid Mime Types.
            </param>
            <param name="invalidMediaTypes">
            The invalid Mime Types.
            </param>
            <exception cref="T:System.NotSupportedException"><c>NotSupportedException</c>.</exception>
            <exception cref="T:System.IO.FileNotFoundException"><c>FileNotFoundException</c>.</exception>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.GetExtension(System.IO.FileInfo)">
            <summary>
            Get file extension in uppercase, without dot.
            </summary>
            <param name="file">
            The file to get extension from.
            </param>
            <returns>
            Cleaned extension.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.CheckExe(System.IO.FileInfo,System.String)">
            <summary>
            The check exe.
            </summary>
            <param name="file">
            The file.
            </param>
            <param name="expectedFileName">
            The expected File Name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="file"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Could not find exe.
            </exception>
            <exception cref="T:System.ArgumentException">
            file.
            </exception>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.BuildFileDebuggingOutput(System.IO.FileInfo)">
            <summary>
            The build file debugging output.
            </summary>
            <param name="file">
            The file.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.OutputContains(Acoustics.Shared.ProcessRunner,System.String)">
            <summary>
            The output contains.
            </summary>
            <param name="runner">
            The runner.
            </param>
            <param name="compareString">
            The compare string.
            </param>
            <returns>
            The System.Boolean.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.RunExe(Acoustics.Shared.ProcessRunner,System.String,System.String)">
            <summary>
            Run an executable. Will wait for up to <c>ProcessTimeout</c> time,
            then kill the process. Will retry up to 3 times if the timeout is reached.
            </summary>
            <param name="processRunner">
            The process runner.
            </param>
            <param name="arguments">
            The arguments.
            </param>
            <param name="workingDirectory">
            The working Directory.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.CheckFile(System.IO.FileInfo)">
            <summary>
            The check file.
            </summary>
            <param name="file">
            The file.
            </param>
            <exception cref="T:System.ArgumentNullException">file.</exception>
            <exception cref="T:System.ArgumentException">file.</exception>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.CheckMp3BitRate(System.Int32)">
            <summary>
            The check mp 3 bit rate.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.CheckMp3SampleRate(System.Int32)">
            <summary>
            The check mp 3 sample rate.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.AbstractUtility.CheckRequestValidForMediaType(System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The check request valid for output.
            </summary>
            <param name="output">
            The output.
            </param>
            <param name="outputMediaType">
            The output media type.
            </param>
            <param name="request">
            The request.
            </param>
        </member>
        <member name="T:Acoustics.Tools.Audio.CustomSpectrogramUtility">
            <summary>
            Signal to Image used by web site.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.CustomSpectrogramUtility.WindowOverlap">
            <summary>
            Window overlap of 0, framesize of 512, samplerate of 22050.
            1 pixel for every 23.22 ms.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.CustomSpectrogramUtility.Hamming">
            <summary>
            Hamming window function.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.#ctor(Acoustics.Tools.Audio.IAudioUtility)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.CustomSpectrogramUtility"/> class.
            </summary>
            <param name="audioUtility">
            The audio utility.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.#ctor(Acoustics.Tools.Audio.IAudioUtility,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.CustomSpectrogramUtility"/> class.
            </summary>
            <param name="audioUtility">
            The audio utility.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.Create(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.SpectrogramRequest)">
            <summary>
            Create a spectrogram from a segment of the <paramref name="source"/> audio file.
            <paramref name="output"/> image file will be created.
            </summary>
            <param name="source">
            The source audio file.
            </param>
            <param name="sourceMimeType">
            The source Mime Type.
            </param>
            <param name="output">
            The output image file. Ensure the file does not exist.
            </param>
            <param name="outputMimeType">
            The output Mime Type.
            </param>
            <param name="request">
            The spectrogram request.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.Spectrogram(System.Byte[])">
            <summary>
            Generate a Spectrogram.
            </summary>
            <param name="bytes">
            The bytes.
            </param>
            <returns>
            Spectrogram image.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.GetSpectrogram(Acoustics.Tools.Wav.IWavReader,System.Int32)">
            <summary>
            Get a spectrogram.
            Channel must be > 0.
            </summary>
            <param name="reader">Wav Reader.</param>
            <param name="channel">Channel number.</param>
            <returns>Spectrogram image.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.SubSample(System.Double[],System.Int32,System.Int32)">
            <summary>
            Subsamples audio.
            </summary>
            <param name="samples">
            The samples.
            </param>
            <param name="currentSampleRate">
            The current Sample Rate.
            </param>
            <param name="targetSampleRate">
            The target Sample Rate.
            </param>
            <returns>
            The sub sample.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            <c>InvalidOperationException</c>.
            </exception>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.FrameStartEnds(System.Int32,System.Int32,System.Double)">
            <summary>
            Returns the start and end index of all frames in a long audio signal.
            </summary>
            <param name="dataLength">
            The data Length.
            </param>
            <param name="windowSize">
            The window Size.
            </param>
            <param name="windowOverlap">
            The window Overlap.
            </param>
            <exception cref="T:System.ArgumentException">
            Signal must produce at least two frames!.
            </exception>
            <returns>
            The frame start ends.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.CalcuateWindowWeights(System.Int32,System.Func{System.Int32,System.Int32,System.Double})">
            <summary>
            Calcuate window weights.
            </summary>
            <param name="windowSize">
            The window Size.
            </param>
            <param name="windowFunction">
            The window Function.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="windowFunction"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            WindowSize must be a power of 2.
            </exception>
            <returns>
            The window weights.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.IsPowerOf2(System.Int32)">
            <summary>
            Is <paramref name="number"/> a power of 2.
            </summary>
            <param name="number">
            The number.
            </param>
            <returns>
            True if <paramref name="number"/> is a power of 2.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.InvokeDotNetFft(System.Double[],System.Int32,System.Int32,System.Double[])">
            <summary>
            This .NET FFT library was downloaded from  http://www.mathdotnet.com/Iridium.aspx.
            The documentation and various examples of code are available at http://www.mathdotnet.com/doc/IridiumFFT.ashx.
            </summary>
            <param name="data">
            signal samples.
            </param>
            <param name="windowSize">
            The window Size.
            </param>
            <param name="coeffCount">
            The coeff Count.
            </param>
            <param name="windowWeights">
            The window Weights.
            </param>
            <returns>
            Transformed samples.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.DecibelSpectra(System.Double[0:,0:],System.Double,System.Int32,System.Double)">
            <summary>
            Converts spectral amplitudes directly to dB, normalising for window power and sample rate.
            NOTE 1: The window contributes power to the signal which must subsequently be removed from the spectral power.
            NOTE 2: Spectral power must be normaliesd for sample rate. Effectively calculate freq power per sample.
            NOTE 3: The power in all freq bins except f=0 must be doubled because the power spectrum is an even function about f=0;
                    This is due to the fact that the spectrum actually consists of 512 + 1 values, the centre value being for f=0.
            NOTE 4: The decibels value is a ratio. Here the ratio is implied.
                    dB = 10*log(amplitude ^2) but in this method adjust power to account for power of Hamming window and SR.
            NOTE 5: THIS METHOD ASSUMES THAT THE LAST BIN IS THE NYQUIST FREQ BIN.
            </summary>
            <param name="amplitudeM">the amplitude spectra.</param>
            <param name="windowPower">value for window power normalisation.</param>
            <param name="sampleRate">to normalise for the sampling rate.</param>
            <param name="epsilon">small value to avoid log of zero.</param>
            <returns>Decibel Spectra.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.CalculateModalNoise(System.Double[0:,0:])">
             <summary>
             Calculates the modal noise value for each freq bin.
             Does so using a series of overlapped matrices.
             TODO!!!! COULD SIMPLY THIS METHOD. JUST CALCULATE MODE FOR EACH FREQ BIN WITHOUT OVERLAP ....
             .... AND THEN APPLY MORE SEVERE SMOOTHING TO THE MODAL NOISE PROFILE IN PREVIOUS METHOD.
            
             COMPARE THIS METHOD WITH SNR.SubtractModalNoise().
             </summary>
             <param name="matrix">Audio sample matrix.</param>
             <returns>Modal noise values.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.MinMax(System.Double[0:,0:],System.Double@,System.Double@)">
            <summary>
            returns the min and max values in a matrix of doubles.
            </summary>
            <param name="data">
            The audio data.
            </param>
            <param name="min">
            The min value.
            </param>
            <param name="max">
            The max value.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.Submatrix(System.Double[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the submatrix of passed matrix.
            Assume that r1 less than r2, c1 less than c2.
            Row, column indices start at 0.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.FilterMovingAverage(System.Double[],System.Int32)">
            <summary>
            Filter Moving Average.
            </summary>
            <param name="signal">Audio signal.</param>
            <param name="width">Given width.</param>
            <returns>Filtered moving average.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.FilterMovingAverage(System.Int32[],System.Int32)">
            <summary>
            wrapper so one can call moving average filter with array of int.
            </summary>
            <param name="signal">Audio signal.</param>
            <param name="width">Given Width.</param>
            <returns>filtered signal.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.GetMaxIndex(System.Double[],System.Int32@)">
            <summary>
            returns the index of max value in an array of doubles.
            array index starts at zero.
            </summary>
            <param name="data">audio data.</param>
            <param name="indexMax">maximum index.</param>
        </member>
        <member name="M:Acoustics.Tools.Audio.CustomSpectrogramUtility.GetImage(System.Double[0:,0:])">
            <summary>
            Get image.
            </summary>
            <param name="data">
            transformed data.
            </param>
            <returns>
            the image.
            </returns>
        </member>
        <member name="T:Acoustics.Tools.Audio.FfmpegAudioUtility">
            <summary>
            Audio utility implemented using ffmpeg.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.FfmpegAudioUtility.#ctor(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.FfmpegAudioUtility"/> class.
            </summary>
            <param name="ffmpegExe">
            The ffmpeg exe.
            </param>
            <param name="ffprobeExe">The ffprobe exe.</param>
        </member>
        <member name="M:Acoustics.Tools.Audio.FfmpegAudioUtility.#ctor(System.IO.FileInfo,System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.FfmpegAudioUtility"/> class.
            </summary>
            <param name="ffmpegExe">
            The ffmpeg exe.
            </param>
            <param name="ffprobeExe">The ffprobe exe.</param>
            ///
        </member>
        <member name="P:Acoustics.Tools.Audio.FfmpegAudioUtility.ValidSourceMediaTypes">
            <summary>
            Gets the valid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.FfmpegAudioUtility.InvalidSourceMediaTypes">
            <summary>
            Gets the invalid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.FfmpegAudioUtility.ValidOutputMediaTypes">
            <summary>
            Gets the valid output media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.FfmpegAudioUtility.InvalidOutputMediaTypes">
            <summary>
            Gets the invalid output media types.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.FfmpegAudioUtility.ConstructModifyArgs(System.IO.FileInfo,System.IO.FileInfo,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The construct modify args.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="request">
            The request.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.FfmpegAudioUtility.ConstructInfoArgs(System.IO.FileInfo)">
            <summary>
            The construct info args.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.FfmpegAudioUtility.GetInfo(System.IO.FileInfo,Acoustics.Shared.ProcessRunner)">
            <summary>
            The get info.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="process">
            The process.
            </param>
            <returns>
            The Acoustics.Tools.AudioUtilityInfo.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.FfmpegAudioUtility.CheckRequestValid(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The check audioutility request.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="sourceMimeType">
            The source Mime Type.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="outputMediaType">
            The output media type.
            </param>
            <param name="request">
            The request.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.FfmpegRawPcmAudioUtility.#ctor(System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.FfmpegRawPcmAudioUtility"/> class.
            </summary>
            <param name="ffmpegExe">
            The ffmpeg exe.
            </param>
            /// <param name="tempDir">Directory for temporary files.</param>
        </member>
        <member name="T:Acoustics.Tools.Audio.IAudioUtility">
            <summary>
            Interface for manipulating audio.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.IAudioUtility.Modify(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            Segment a <paramref name="source"/> audio file.
            <paramref name="output"/> file will be created.
            </summary>
            <param name="source">
            The <paramref name="source"/> audio file.
            </param>
            <param name="sourceMediaType">
            The <paramref name="source"/> Mime Type.
            </param>
            <param name="output">
            The <paramref name="output"/> audio file. Ensure the file does not exist.
            </param>
            <param name="outputMediaType">
            The <paramref name="output"/> Mime Type.
            </param>
            <param name="request">
            The segment <paramref name="request"/>.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.IAudioUtility.Info(System.IO.FileInfo)">
            <summary>
            Get meta data for the given file.
            </summary>
            <param name="source">File to get meta data from. This should be an audio file.</param>
            <returns>A dictionary containing meta data for the given file.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.ISpectrogramUtility.Create(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.SpectrogramRequest)">
            <summary>
            Create a spectrogram from a segment of the <paramref name="source"/> audio file.
            <paramref name="output"/> image file will be created.
            </summary>
            <param name="source">
            The source audio file.
            </param>
            <param name="sourceMimeType">
            The source Mime Type.
            </param>
            <param name="output">
            The output image file. Ensure the file does not exist.
            </param>
            <param name="outputMimeType">
            The output Mime Type.
            </param>
            <param name="request">
            The spectrogram request.
            </param>
        </member>
        <member name="T:Acoustics.Tools.Audio.MasterAudioUtility">
            <summary>
            Combined audio utility that makes use of the most appropriate audio utility for the task.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.MasterAudioUtility.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.MasterAudioUtility"/> class.
            Creates a new audio utility that can be used to convert and segment audio, and to get information about audio.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.MasterAudioUtility.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.MasterAudioUtility"/> class.
            Creates a new audio utility that can be used to convert and segment audio, and to get information about audio.
            </summary>
            <param name="temporaryFilesDirectory">Directory for temporary files.</param>
        </member>
        <member name="M:Acoustics.Tools.Audio.MasterAudioUtility.#ctor(Acoustics.Tools.Audio.FfmpegAudioUtility,Acoustics.Tools.Audio.WavPackAudioUtility,Acoustics.Tools.Audio.SoxAudioUtility,Acoustics.Tools.Audio.FfmpegRawPcmAudioUtility,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.MasterAudioUtility"/> class.
            Creates a new audio utility that can be used to convert and segment audio, and to get information about audio.
            The given audio utility instances will be used.
            </summary>
            <param name="ffmpegUtility">ffmpeg utility.
            </param>
            <param name="wvunpackUtility">wxunpack utility.
            </param>
            <param name="soxUtility">sox utility.
            </param>
            <param name="ffmpegRawPcmUtility">The ffmpeg utility for converting raw PCM data.</param>
            <param name="temporaryFilesDirectory">Directory for temporary files.</param>
        </member>
        <member name="M:Acoustics.Tools.Audio.MasterAudioUtility.SegmentToWav(System.IO.FileInfo,System.IO.FileInfo,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            Convert an audio file to a specific wav format using the default audio utility settings.
            </summary>
            <param name="source">
            The source audio file.
            </param>
            <param name="output">
            The destination wav path.
            </param>
            <param name="request">
            The request.
            </param>
        </member>
        <member name="P:Acoustics.Tools.Audio.MasterAudioUtility.ValidSourceMediaTypes">
            <summary>
            Gets the valid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.MasterAudioUtility.InvalidSourceMediaTypes">
            <summary>
            Gets the invalid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.MasterAudioUtility.ValidOutputMediaTypes">
            <summary>
            Gets the valid output media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.MasterAudioUtility.InvalidOutputMediaTypes">
            <summary>
            Gets the invalid output media types.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.MasterAudioUtility.Modify(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            Segment a <paramref name="source"/> audio file.
            <paramref name="output"/> file will be created.
            Will not delete the output.
            </summary>
            <param name="source">
            The source audio file.
            </param>
            <param name="sourceMediaType">
            The source Mime Type.
            </param>
            <param name="output">
            The output audio file.
            </param>
            <param name="outputMediaType">
            The output Mime Type.
            </param>
            <param name="request">
            The request.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.MasterAudioUtility.Info(System.IO.FileInfo)">
            <summary>
            Get metadata for the given file.
            </summary>
            <param name="source">File to get metadata from. This should be an audio file.</param>
            <returns>A dictionary containing metadata for the given file.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.MasterAudioUtility.ConstructModifyArgs(System.IO.FileInfo,System.IO.FileInfo,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The construct modify args.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="request">
            The request.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.MasterAudioUtility.ConstructInfoArgs(System.IO.FileInfo)">
            <summary>
            The construct info args.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.MasterAudioUtility.GetInfo(System.IO.FileInfo,Acoustics.Shared.ProcessRunner)">
            <summary>
            The get info.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="process">
            The process.
            </param>
            <returns>
            The Acoustics.Tools.AudioUtilityInfo.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.MasterAudioUtility.CheckRequestValid(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The check audioutility request.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="sourceMimeType">
            The source Mime Type.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="outputMediaType">
            The output media type.
            </param>
            <param name="request">
            The request.
            </param>
        </member>
        <member name="T:Acoustics.Tools.Audio.Mp3SpltAudioUtility">
            <summary>
            Mp3 split audio utility.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.Mp3SpltAudioUtility"/> class.
            </summary>
            <param name="mp3SpltExe">
            The mp 3 splt exe.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">Could not find exe.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mp3SpltExe" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.#ctor(System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.Mp3SpltAudioUtility"/> class.
            </summary>
            <param name="mp3SpltExe">
            The mp 3 splt exe.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">Could not find exe.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="mp3SpltExe" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.ValidSourceMediaTypes">
            <summary>
            Gets the valid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.InvalidSourceMediaTypes">
            <summary>
            Gets the invalid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.ValidOutputMediaTypes">
            <summary>
            Gets the valid output media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.InvalidOutputMediaTypes">
            <summary>
            Gets the invalid output media types.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.ConstructModifyArgs(System.IO.FileInfo,System.IO.FileInfo,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The construct modify args.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="request">
            The request.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.ConstructInfoArgs(System.IO.FileInfo)">
            <summary>
            The construct info args.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.GetInfo(System.IO.FileInfo,Acoustics.Shared.ProcessRunner)">
            <summary>
            The get info.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="process">
            The process.
            </param>
            <returns>
            The Acoustics.Tools.AudioUtilityInfo.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.CheckRequestValid(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The check audioutility request.
            </summary>
            <param name="output">
            The output.
            </param>
            <param name="outputMediaType">
            The output media type.
            </param>
            <param name="request">
            The request.
            </param>
            <exception cref="T:System.ArgumentException">Mp3Splt cannot perform this type of request.</exception>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.WorkingDirectory">
            <summary>
            Gets or sets WorkingDirectory.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.Mp3FileName">
            <summary>
            Gets or sets Mp3File.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.SegmentSizeMinutes">
            <summary>
            Gets or sets SegmentSizeMinutes (0 - no limit).
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.SegmentSizeSeconds">
            <summary>
            Gets or sets SegmentSizeSeconds (0 - 59).
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.SegmentSizeHundredths">
            <summary>
            Gets or sets SegmentSizeHundredths (0 - 99). Use for higher precision.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.Run">
            <summary>
            Split the mp3 file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <c>InvalidOperationException</c>.
            </exception>
            <returns>
            Standard output and error.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.SingleSegment(System.String,System.Int64,System.Int64)">
            <summary>
            Get a single segment froma file.
            </summary>
            <param name="tempFilePath">Temp file path.</param>
            <param name="start">
            Start in milliseconds from start of file.
            </param>
            <param name="end">
            End in milliseconds from start of file.
            </param>
            <returns>
            Path to segment.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.CheckAndCreateWorkingDir">
            <summary>
            The check and create working dir.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <c>InvalidOperationException</c>.
            </exception>
            <returns>
            Working dir.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.CreateArguments(System.String)">
            <summary>
            Create arguments for segmenting entire file.
            </summary>
            <param name="workingDir">Working directory.</param>
            <returns>Argument string.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.CreateSingleSegmentArguments(System.String,System.Int64,System.Int64)">
            <summary>
            Create arguments to make one segment.
            </summary>
            <param name="tempFilePath">Temp file path.</param>
            <param name="start">Start in milliseconds from start of audio file.</param>
            <param name="end">End in milliseconds from start of audio file.</param>
            <returns>Argument string.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.RunProcess(System.String)">
            <summary>
            Run process and get standard output.
            </summary>
            <param name="args">Arguments for mp3splt.</param>
            <returns>List of strings from standard output.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.ParseFileName(System.IO.FileInfo)">
            <summary>
            Get start and end from file name.
            </summary>
            <param name="file">File name to parse.</param>
            <returns>Range containing start and end.</returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.Mp3SpltAudioUtility.GenerateFileName(System.String,System.Int64,System.Int64)">
            <summary>
            Generate file name from template file name.
            </summary>
            <param name="originalFileName">Original mp3 file.</param>
            <param name="start">Start in milliseconds from start of original file.</param>
            <param name="end">End in milliseconds from start of original file.</param>
            <returns>Generated file name.</returns>
        </member>
        <member name="T:Acoustics.Tools.Audio.Mp3SpltAudioUtility.SplitFileInfo">
            <summary>
            Info for split files.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.SplitFileInfo.File">
            <summary>
            Gets or sets File.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.SplitFileInfo.End">
            <summary>
            Gets or sets End.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.Mp3SpltAudioUtility.SplitFileInfo.Start">
            <summary>
            Gets or sets Start.
            </summary>
        </member>
        <member name="T:Acoustics.Tools.Audio.ShntoolAudioUtility">
            <summary>
            Shntool audio Utility wrapper.
            </summary>
            <remarks>
            see: http://www.etree.org/shnutils/shntool/ for more info.
            </remarks>
        </member>
        <member name="M:Acoustics.Tools.Audio.ShntoolAudioUtility.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.ShntoolAudioUtility"/> class.
            </summary>
            <param name="shntoolExe">
            The shntool exe.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">Could not find exe.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="shntoolExe" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Acoustics.Tools.Audio.ShntoolAudioUtility.#ctor(System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.ShntoolAudioUtility"/> class.
            </summary>
            <param name="shntoolExe">
            The shntool exe.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">Could not find exe.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="shntoolExe" /> is <c>null</c>.</exception>
        </member>
        <member name="P:Acoustics.Tools.Audio.ShntoolAudioUtility.ValidSourceMediaTypes">
            <summary>
            Gets the valid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.ShntoolAudioUtility.InvalidSourceMediaTypes">
            <summary>
            Gets the invalid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.ShntoolAudioUtility.ValidOutputMediaTypes">
            <summary>
            Gets the valid output media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.ShntoolAudioUtility.InvalidOutputMediaTypes">
            <summary>
            Gets the invalid output media types.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.ShntoolAudioUtility.ConstructModifyArgs(System.IO.FileInfo,System.IO.FileInfo,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The construct modify args.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="request">
            The request.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.ShntoolAudioUtility.ConstructInfoArgs(System.IO.FileInfo)">
            <summary>
            The construct info args.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.ShntoolAudioUtility.GetInfo(System.IO.FileInfo,Acoustics.Shared.ProcessRunner)">
            <summary>
            The get info.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="process">
            The process.
            </param>
            <returns>
            The Acoustics.Tools.AudioUtilityInfo.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.ShntoolAudioUtility.CheckRequestValid(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The check audioutility request.
            </summary>
            <param name="sourceMediaType">The source media type.</param>
            <param name="output">
            The output.
            </param>
            <param name="outputMediaType">
            The output media type.
            </param>
            <param name="request">
            The request.
            </param>
            <param name="source">The source file.</param>
            <exception cref="T:System.ArgumentException">Mp3Splt cannot perform this type of request.</exception>
        </member>
        <member name="T:Acoustics.Tools.Audio.SoxAudioUtility">
            <summary>
            Soxi (sound exchange information) Audio utility.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.SoxAudioUtility.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.SoxAudioUtility"/> class.
            </summary>
            <param name="soxExe">
            The exe file.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
            Could not find exe.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="soxExe"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Acoustics.Tools.Audio.SoxAudioUtility.#ctor(System.IO.FileInfo,System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.SoxAudioUtility"/> class.
            </summary>
            <param name="soxExe">
            The exe file.
            </param>
            <param name="temporaryFilesDirectory">
            Which directory should hold temporary files.
            </param>
            <param name="enableShortNameHack">
            Whether or not filenames with unicode characters should be shortened
            to 8.3 filenames on Windows.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
            Could not find exe.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="soxExe"/> is <c>null</c>.
            </exception>
        </member>
        <member name="T:Acoustics.Tools.Audio.SoxAudioUtility.SoxResampleQuality">
            <summary>
            Resample quality.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.SoxAudioUtility.SoxResampleQuality.Quick">
            <summary>
            −q
            bandwidth: n/a
            Rej dB: ~30 @ Fs/4
            Typical Use: playback on ancient hardware.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.SoxAudioUtility.SoxResampleQuality.Low">
            <summary>
            −l
            bandwidth: 80%
            Rej dB: 100
            Typical Use: playback on old hardware.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.SoxAudioUtility.SoxResampleQuality.Medium">
            <summary>
            −m
            bandwidth: 95%
            Rej dB: 100
            Typical Use: audio playback.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.SoxAudioUtility.SoxResampleQuality.High">
            <summary>
            −h
            bandwidth: 125
            Rej dB: 125
            Typical Use: 16-bit mastering (use with dither).
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.SoxAudioUtility.SoxResampleQuality.VeryHigh">
            <summary>
            −v
            bandwidth: 95%
            Rej dB: 175
            Typical Use: 24-bit mastering.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.SoxAudioUtility.ResampleQuality">
            <summary>
            Gets ResampleQuality.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.SoxAudioUtility.ValidSourceMediaTypes">
            <summary>
            Gets the valid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.SoxAudioUtility.InvalidSourceMediaTypes">
            <summary>
            Gets the invalid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.SoxAudioUtility.ValidOutputMediaTypes">
            <summary>
            Gets the valid output media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.SoxAudioUtility.InvalidOutputMediaTypes">
            <summary>
            Gets the invalid output media types.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.SoxAudioUtility.ConstructModifyArgs(System.IO.FileInfo,System.IO.FileInfo,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The construct modify args.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="request">
            The request.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.SoxAudioUtility.ConstructInfoArgs(System.IO.FileInfo)">
            <summary>
            The construct info args.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.SoxAudioUtility.GetInfo(System.IO.FileInfo,Acoustics.Shared.ProcessRunner)">
            <summary>
            The get info.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="process">
            The process.
            </param>
            <returns>
            The Acoustics.Tools.AudioUtilityInfo.
            </returns>
        </member>
        <member name="T:Acoustics.Tools.Audio.SoxSpectrogramUtility">
            <summary>
            Spectrogram utility that uses sox.exe to generate spectrograms.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Audio.SoxSpectrogramUtility.ArgsFormatString">
            <summary>
            Default to verbose output, smaple rate of 22050, monochrome spectrogram using hann window function without axises.
            Uses pixels per second measurement from Towsey's spectrograms.
            </summary>
            <remarks>
            See http://sox.sourceforge.net/sox.html for details on the arguments for spectrogram.
            </remarks>
        </member>
        <member name="M:Acoustics.Tools.Audio.SoxSpectrogramUtility.#ctor(Acoustics.Tools.Audio.IAudioUtility,System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.SoxSpectrogramUtility"/> class.
            </summary>
            <param name="audioUtility">
            The audio utility.
            </param>
            <param name="soxExe">
            The sox exe.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.SoxSpectrogramUtility.#ctor(Acoustics.Tools.Audio.IAudioUtility,System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.SoxSpectrogramUtility"/> class.
            </summary>
            <param name="audioUtility">
            The audio utility.
            </param>
            <param name="soxExe">
            The sox exe.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Audio.SoxSpectrogramUtility.Create(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.SpectrogramRequest)">
            <summary>
            Create a spectrogram from a segment of the <paramref name="source"/> audio file.
            <paramref name="output"/> image file will be created.
            </summary>
            <param name="source">
            The source audio file.
            </param>
            <param name="sourceMimeType">
            The source Mime Type.
            </param>
            <param name="output">
            The output image file. Ensure the file does not exist.
            </param>
            <param name="outputMimeType">
            The output Mime Type.
            </param>
            <param name="request">
            The spectrogram request.
            </param>
        </member>
        <member name="T:Acoustics.Tools.Audio.WavPackAudioUtility">
            <summary>
            Audio utility implemented using wav(un)pack.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.WavPackAudioUtility.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.WavPackAudioUtility"/> class.
            </summary>
            <param name="wavUnpack">
            The wav Unpack.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
            If the provided binary does not exist.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="wavUnpack"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="wavUnpack"/> does contain the string "wavUnpack".
            </exception>
        </member>
        <member name="M:Acoustics.Tools.Audio.WavPackAudioUtility.#ctor(System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Audio.WavPackAudioUtility"/> class.
            </summary>
            <param name="wavUnpack">
            The wav Unpack.
            </param>
            <exception cref="T:System.IO.FileNotFoundException">
            If the provided binary does not exist.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="wavUnpack"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="wavUnpack"/> does contain the string "wavUnpack".
            </exception>
        </member>
        <member name="P:Acoustics.Tools.Audio.WavPackAudioUtility.ValidSourceMediaTypes">
            <summary>
            Gets the valid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.WavPackAudioUtility.InvalidSourceMediaTypes">
            <summary>
            Gets the invalid source media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.WavPackAudioUtility.ValidOutputMediaTypes">
            <summary>
            Gets the valid output media types.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Audio.WavPackAudioUtility.InvalidOutputMediaTypes">
            <summary>
            Gets the invalid output media types.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Audio.WavPackAudioUtility.ConstructModifyArgs(System.IO.FileInfo,System.IO.FileInfo,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The construct modify args.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="request">
            The request.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.WavPackAudioUtility.ConstructInfoArgs(System.IO.FileInfo)">
            <summary>
            The construct info args.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The System.String.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.WavPackAudioUtility.GetInfo(System.IO.FileInfo,Acoustics.Shared.ProcessRunner)">
            <summary>
            The get info.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="process">
            The process.
            </param>
            <returns>
            The Acoustics.Tools.AudioUtilityInfo.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Audio.WavPackAudioUtility.CheckRequestValid(System.IO.FileInfo,System.String,System.IO.FileInfo,System.String,Acoustics.Tools.AudioUtilityRequest)">
            <summary>
            The check audioutility request.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="sourceMimeType">
            The source Mime Type.
            </param>
            <param name="output">
            The output.
            </param>
            <param name="outputMediaType">
            The output media type.
            </param>
            <param name="request">
            The request.
            </param>
            <exception cref="T:System.ArgumentException">
            Wvunpack cannot perform this type of request.
            </exception>
        </member>
        <member name="T:Acoustics.Tools.SpectrogramRequest">
            <summary>
            Spectrogram Request.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.SpectrogramRequest.Start">
            <summary>
            Gets or sets start of cache request segment in milliseconds relative to start of audio reading.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.SpectrogramRequest.End">
            <summary>
            Gets or sets end of cache request segment in milliseconds relative to start of audio reading.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.SpectrogramRequest.Width">
            <summary>
            Gets or sets Width.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.SpectrogramRequest.Height">
            <summary>
            Gets or sets Height.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.SpectrogramRequest.PixelsPerMillisecond">
            <summary>
            Gets or sets Pixels Per Millisecond.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.SpectrogramRequest.IsCalculatedWidthAvailable">
            <summary>
            Gets a value indicating whether the Calculated Width is Available.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.SpectrogramRequest.CalculatedWidth">
            <summary>
            Gets CalculatedWidth.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.SpectrogramRequest.Validate">
            <summary>
            Validate this Spectrogram Request.
            </summary>
            <returns>
            True if valid, otherwise false.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.SpectrogramRequest.ToString">
            <summary>
            Get a string representation of this spectrogram request.
            </summary>
            <returns>
            String representation.
            </returns>
        </member>
        <member name="T:Acoustics.Tools.Wav.IWavReader">
            <summary>
            Wav streaming interface.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.IWavReader.SampleStream">
            <summary>
            Gets Samples. Make no assumptions about the position of the stream.
            Use this.Chunks to position the stream at the start of the chunk you want.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.IWavReader.Samples">
            <summary>
            Gets Samples.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.IWavReader.Chunks">
            <summary>
            Gets Chunks in the wav stream.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.IWavReader.AudioInfo">
            <summary>
            Gets wav Audio Info.
            </summary>
        </member>
        <member name="T:Acoustics.Tools.Wav.WavAudioInfo">
            <summary>
            The wav audio info.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavAudioInfo.Channels">
            <summary>
            Gets or sets   Number of channels.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavAudioInfo.SampleRate">
            <summary>
            Gets or sets Sample rate of audio (number of samples per second).
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavAudioInfo.BitsPerSample">
            <summary>
            Gets or sets   Bits per sample.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavAudioInfo.BytesPerSample">
            <summary>
            Gets or sets   Bytes Per Sample / Block Align.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavAudioInfo.CompressionCode">
            <summary>
             Gets or sets  Compression code (1 for uncompressed PCM audio).
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavAudioInfo.BytesPerSecond">
            <summary>
             Gets or sets  Bytes per second.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavAudioInfo.Duration">
            <summary>
             Gets or sets  Total duration of audio.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavAudioInfo.Epsilon">
            <summary>
             Gets Epsilon.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavAudioInfo.Frames">
            <summary>
             Gets or sets Number of frames (samples).
            </summary>
        </member>
        <member name="T:Acoustics.Tools.Wav.WavChunk">
            <summary>
            Wav chunk.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavChunk.Position">
            <summary>
            Gets or sets Position.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavChunk.Name">
            <summary>
            Gets or sets Name.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavChunk.Length">
            <summary>
            Gets or sets Length.
            </summary>
        </member>
        <member name="T:Acoustics.Tools.Wav.WavReader">
            <summary>
            Wave Reader.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavReader.WavFileExtension">
            <summary>
            Wav file extension.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavReader.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Wav.WavReader"/> class.
            </summary>
            <param name="wavData">
            The wav data.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavReader.#ctor(System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Wav.WavReader"/> class.
            This method assumes channel samples are interleaved!.
            </summary>
            <param name="rawData">
            The raw data with interleaved samples from each channel.
            </param>
            <param name="channels">
            The channels.
            </param>
            <param name="bitsPerSample">
            The bits per sample.
            </param>
            <param name="sampleRate">
            The sample rate.
            </param>
        </member>
        <member name="T:Acoustics.Tools.Wav.WavReader.WaveFormat">
            <summary>
             Common Wave Compression Codes
            Code            Description
            -------------------------------------------
            0 (0x0000)      Unknown
            1 (0x0001)      PCM/uncompressed
            2 (0x0002)      Microsoft ADPCM
            3 (0x0003)      PCM data in IEEE floating-point format.
            6 (0x0006)      ITU G.711 a-law
            7 (0x0007)      ITU G.711 Âµ-law
            17 (0x0011)     IMA ADPCM
            20 (0x0016)     ITU G.723 ADPCM (Yamaha)
            49 (0x0031)     GSM 6.10
            64 (0x0040)     ITU G.721 ADPCM
            80 (0x0050)     MPEG
            65,534 (0xFFFE) WAVE_FORMAT_EXTENSIBLE
            65,535 (0xFFFF) Experimental.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavReader.WaveFormat.WAVE_FORMAT_PCM">
            <summary>
            PCM/uncompressed
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavReader.WaveFormat.WAVE_FORMAT_ADPCM">
            <summary>
            Microsoft ADPCM
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavReader.WaveFormat.WAVE_FORMAT_IEEE_FLOAT">
            <summary>
            IEEE Float
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavReader.WaveFormat.WAVE_FORMAT_ALAW">
            <summary>
            8-bit ITU-T G.711 A-law
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavReader.WaveFormat.WAVE_FORMAT_MULAW">
            <summary>
            8-bit ITU-T G.711 µ-law
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavReader.WaveFormat.WAVE_FORMAT_EXTENSIBLE">
            <summary>
            Determined by SubFormat
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavReader.WaveFormat.WAVE_FORMAT_EXPERIMENTAL">
            <summary>
            Experimental
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.BitsPerSample">
            <summary>
            Gets or sets BitsPerSample as if were a single channel.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.BlockAlign">
            <summary>
            Gets or sets BlockAlign - the number of bytes in each sample for all channels.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.BlockCount">
            <summary>
            Gets BlockCount - the number of blocks of data (each channel has one sample).
            Defined in http://www-mmsp.ece.mcgill.ca/documents/audioformats/wave/wave.html.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.Channels">
            <summary>
            Gets or sets Channels.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.Epsilon">
            <summary>
            Gets the Epsilon (smallest distinguishable value) for this format.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.ExactDurationSeconds">
            <summary>
            Gets the ExactDurationSeconds of the data.
            This calculation should be accurate down to the nanosecond.
            Note this is a new value and SHOULD NOT be used for any real calculations.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.Length">
            <summary>
            Gets the total number of samples for each channel.
            An alias for BlockCount.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.SampleRate">
            <summary>
            Gets or sets SampleRate.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.Samples">
            <summary>
            Gets the samples.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.Time">
            <summary>
            Gets Time - the duration of the data.
            NOTE: this value has been rounded to the nearest millisecond!
            See <see cref="P:Acoustics.Tools.Wav.WavReader.ExactDurationSeconds"/> for a precise value.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.ValidBitsPerSample">
            <summary>
            Gets ValidBitsPerSample. Only set when Format is WAVE_FORMAT_EXTENSIBLE.
            wValidBitsPerSample specifies the precision of the sample in bits.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavReader.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets values from samples.
            </summary>
            <param name="index">The sample to operate on.</param>
            <param name="channel">The channel to operate on.</param>
            <returns>A sample for the selected index and channel.</returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavReader.CalculateEpsilonForRescaledInteger(System.Int32)">
            <summary>
            Calculates the smallest possible representable value for an integer of size <c>bitDepth</c>
            hat has been rescaled to the range [-1,1].
            </summary>
            <param name="bitDepth">The bit depth of the integer the range was represented in before rescaling.</param>
            <returns>The smallest distinguishable value for data that was stored as an integer before rescaling.</returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavReader.SubSample(System.Int32)">
            <summary>
            Sub-samples audio. Obsolete - we recommend you resample with ffmpeg/SoX.
            </summary>
            <param name="interval">
            Keeps every <paramref name="interval"/> sample.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavReader.CalculateMaximumAmplitude">
            <summary>
            Calculate maximum amplitude of audio.
            </summary>
            <returns>
            Maximum Amplitude.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavReader.GetChannel(System.Int32)">
            <summary>
            Get the zero-indexed channel data from channel <c>c</c>.
            </summary>
            <param name="c">The zero-indexed channel to get.</param>
            <returns>the requested channel.</returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavReader.Dispose">
            <summary>
            Dispose this WavReader.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavReader.ParseData(System.Byte[])">
            <summary>
            Parse audio data.
            </summary>
            <param name="data">
            The audio data.
            </param>
            <exception cref="T:System.NotSupportedException">
            Bits per sample other than 8, 16, 24 and 32.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if the data provided is less than 12 bytes.</exception>
            <exception cref="T:System.InvalidOperationException">For various unsupported or erroneous WAV formats.</exception>
        </member>
        <member name="T:Acoustics.Tools.Wav.WavStreamReader">
            <summary>
            Wave audio Stream wrapper.
            This class is NOT thread safe.
            </summary>
            <remarks>
            useful links:
            https://ccrma.stanford.edu/courses/422/projects/WaveFormat/
            http://www.sonicspot.com/guide/wavefiles.html
            http://codeidol.com/java/swing/Audio/Build-an-Audio-Waveform-Display/
            -
            AudioTools WavReader just reads the first channel.
            </remarks>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavStreamReader.ErrorMsg">
            <summary>
            Error message format string.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Wav.WavStreamReader"/> class.
            Create a wave audio stream from an existing stream.
            </summary>
            <param name="stream">
            Stream contaiing audio.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Wav.WavStreamReader"/> class.
            Create a wave audio stream from a byte array.
            </summary>
            <param name="bytes">
            Byte array containing audio.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Argument is null.
            </exception>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Wav.WavStreamReader"/> class.
            Create a wave audio stream from a file.
            </summary>
            <param name="file">
            File containing audio.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="file"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            file.
            </exception>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Acoustics.Tools.Wav.WavStreamReader"/> class.
            Create a wave audio stream from a file.
            </summary>
            <param name="filePath">
            File containing audio.
            </param>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavStreamReader.SampleStream">
            <summary>
            Gets Samples. Make no assumptions about the position of the stream.
            Use this.Chunks to position the stream at the start of the chunk you want.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavStreamReader.Samples">
            <summary>
            Gets all samples.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavStreamReader.GetDataChunk">
            <summary>
            Gets GetDataChunk.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavStreamReader.Chunks">
            <summary>
            Gets chunks in wav audio stream.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavStreamReader.AudioInfo">
            <summary>
            Gets Info about the audio stream.
            </summary>
        </member>
        <member name="P:Acoustics.Tools.Wav.WavStreamReader.GetFileStream">
            <summary>
            Gets a FileStream. Must be disposed by user.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.GetSamples(System.Int64,System.Int64)">
            <summary>
            Get samples from the wav stream. Start from <paramref name="firstSampleIndex"/> (zero indexed),
            and read <paramref name="numberOfSamplesToRead"/>.
            </summary>
            <param name="firstSampleIndex">
            The first Sample Index.
            </param>
            <param name="numberOfSamplesToRead">
            The number Of Samples To Read.
            </param>
            <returns>
            <paramref name="numberOfSamplesToRead"/> starting from <paramref name="firstSampleIndex"/>.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.GetSamples(System.IO.Stream,Acoustics.Tools.Wav.WavChunk,Acoustics.Tools.Wav.WavAudioInfo,System.Int64,System.Int64)">
            <summary>
            Get samples from the wav stream. Start from <paramref name="firstSampleIndex"/> (zero indexed),
            and read <paramref name="numberOfSamplesToRead"/>.
            </summary>
            <param name="wavStream">
            The wav Stream.
            </param>
            <param name="dataChunk">
            The data Chunk.
            </param>
            <param name="wavInfo">
            The wav Info.
            </param>
            <param name="firstSampleIndex">
            The first Sample Index.
            </param>
            <param name="numberOfSamplesToRead">
            The number Of Samples To Read.
            </param>
            <returns>
            <paramref name="numberOfSamplesToRead"/> starting from <paramref name="firstSampleIndex"/>.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.GetSample(System.Int64)">
            <summary>
            Get a single sample. Do not use this method in a loop.
            </summary>
            <param name="sampleIndex">
            The sample index (zero-based).
            </param>
            <returns>
            Read sample.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.Dispose">
            <summary>
            Dispose Wave audio stream by disposing underlying Sample stream.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.ReadSample(System.IO.Stream,Acoustics.Tools.Wav.WavAudioInfo)">
            <summary>
            Reads a single sample from a wav stream.
            </summary>
            <param name="wavStream">Wave Stream.</param>
            <param name="wavInfo">Wave Info.</param>
            <returns>Sample read from stream.</returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.GetCalculatedPosition(Acoustics.Tools.Wav.WavAudioInfo,System.Int64,System.Int64)">
            <summary>
            Get position (number of bytes from start of file) in wav stream of <paramref name="sampleIndex"/>.
            </summary>
            <param name="wavInfo">Wave Info.</param>
            <param name="dataChunkPosition">Data Chunk Position.</param>
            <param name="sampleIndex">Index of Sample.</param>
            <returns>Position of <paramref name="sampleIndex"/>.</returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.ReadFmtChunk(System.IO.BinaryReader,Acoustics.Tools.Wav.WavAudioInfo,System.Int32)">
            <summary>
            Read format chunk. Assumes <paramref name="reader"/> is correctly positioned.
            </summary>
            <param name="reader">
            Binary Reader.
            </param>
            <param name="wavInfo">
            Wav audio info.
            </param>
            <param name="chunkSize">
            The chunk Size.
            </param>
            <exception cref="T:System.IO.InvalidDataException">
            <c>InvalidDataException</c>.
            </exception>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.ReadRiffChunk(System.IO.BinaryReader)">
            <summary>
            Read riff chunk.
            Assumes BinaryReader is at position 0 of wav audio stream.
            </summary>
            <param name="reader">
            Binary reader.
            </param>
            <exception cref="T:System.IO.InvalidDataException">
            <c>InvalidDataException</c>.
            </exception>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavStreamReader.ReadHeader(System.IO.Stream)">
            <summary>
            Reads the wave header and stores info in WavAudioInfo.
            </summary>
            <param name="stream">
            The stream.
            </param>
            <exception cref="T:System.IO.InvalidDataException">
            <c>InvalidDataException</c>.
            </exception>
        </member>
        <member name="T:Acoustics.Tools.Wav.WavUtils">
            <summary>
            Wav utils.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavUtils.BitsPerByte">
            <summary>
            Bites per byte.
            </summary>
        </member>
        <member name="F:Acoustics.Tools.Wav.WavUtils.MaxBitsPerSample">
            <summary>
            Maximum bits per sample.
            </summary>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavUtils.Skip(System.IO.Stream,System.Int32)">
            <summary>
            Skip <paramref name="count"/> bytes.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <param name="count">
            The count.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavUtils.Skip(System.IO.BinaryReader,System.Int32)">
            <summary>
            Skip <paramref name="count"/> bytes.
            </summary>
            <param name="reader">
            The reader.
            </param>
            <param name="count">
            The count.
            </param>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavUtils.StreamCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copy one stream to another.
            </summary>
            <param name="source">
            The source.
            </param>
            <param name="target">
            The target.
            </param>
            <example>
            <code>
            using (FileStream iFile = new FileStream(...))
            using (FileStream oFile = new FileStream(...))
            using (DeflateStream oZip = new DeflateStream(outFile, CompressionMode.Compress))
            StreamCopy(iFile, oZip);
            </code>
            Depending on what you are actually trying to do, you'd chain the streams differently.
            This also uses relatively little memory, because only the data being operated upon is in memory.
            </example>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavUtils.ReadFrame(System.IO.Stream,System.Int16,System.Int16)">
            <summary>
            Read a single frame.
            </summary>
            <param name="wavSource">
            The wav source.
            </param>
            <param name="numberOfChannels">
            The number Of Channels.
            </param>
            <param name="bitsPerSample">
            The bits Per Sample.
            </param>
            <returns>
            One sample per channel.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavUtils.SplitChannels(System.IO.BinaryReader,System.Int16,System.Int16,System.Int32)">
            <summary>
            Splits the channels of a binary sequence.
            </summary>
            <param name="binaryReader">
            The binary reader which contains the binary sequence.
            </param>
            <param name="numberOfChannels">
            The number of channels.
            </param>
            <param name="bitsPerSample">
            The bits per sample.
            </param>
            <param name="numberOfFrames">
            The number of frames.
            </param>
            <returns>
            The samples arranged by channel and frame.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavUtils.ReadSamples(System.IO.Stream,Acoustics.Tools.Wav.WavAudioInfo)">
            <summary>
            Read first channel samples as doubles.
            Set the SampleStream position before using this method.
            </summary>
            <param name="wavSource">
            The wav source.
            </param>
            <param name="wavInfo">
            The wav info.
            </param>
            <returns>
            Samples of first channel.
            </returns>
        </member>
        <member name="M:Acoustics.Tools.Wav.WavUtils.SplitChannels(System.IO.Stream,Acoustics.Tools.Wav.WavAudioInfo,System.Nullable{System.TimeSpan})">
            <summary>
            Get samples per channel. The first channel (mono if it is the only channel) is usually the left.
            </summary>
            <param name="wavSource">
            The wav Source.
            </param>
            <param name="wavInfo">
            The wav Info.
            </param>
            <param name="duration">
            The duration.
            </param>
            <exception cref="T:System.NotSupportedException">
            Bits per sample other than 8 and 16.
            </exception>
            <returns>
            Samples divided into channels.
            </returns>
        </member>
    </members>
</doc>
