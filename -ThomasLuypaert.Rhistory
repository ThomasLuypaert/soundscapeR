subset = "day",
output = "raw")
no_freqseq_day <- as.data.frame(
cbind(no_freqseq_day_5_1,
no_freqseq_day_5_2,
no_freqseq_day_5_3,
no_freqseq_day_6_1,
no_freqseq_day_6_2,
no_freqseq_day_6_3))
colnames(no_freqseq_day) <- c("test_5_1",
"test_5_2",
"test_5_3",
"test_6_1",
"test_6_2",
"test_6_3")
test_no_freqseq_new[[3]] <- no_freqseq_day
# Test 7 - Night
no_freqseq_night_7_1 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
subset = "night",
output = "percentage")
no_freqseq_night_7_2 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 1,
subset = "night",
output = "percentage")
no_freqseq_night_7_3 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 2,
subset = "night",
output = "percentage")
no_freqseq_night_8_1 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
subset = "night",
output = "raw")
no_freqseq_night_8_2 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 1,
subset = "night",
output = "raw")
no_freqseq_night_8_3 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 2,
subset = "night",
output = "raw")
no_freqseq_night <- as.data.frame(
cbind(no_freqseq_night_7_1,
no_freqseq_night_7_2,
no_freqseq_night_7_3,
no_freqseq_night_8_1,
no_freqseq_night_8_2,
no_freqseq_night_8_3))
colnames(no_freqseq_night) <- c("test_7_1",
"test_7_2",
"test_7_3",
"test_8_1",
"test_8_2",
"test_8_3")
test_no_freqseq_new[[4]] <- no_freqseq_night
# Test 9 - Dawn
no_freqseq_dawn_9_1 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
subset = "dawn",
output = "percentage")
no_freqseq_dawn_9_2 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 1,
subset = "dawn",
output = "percentage")
no_freqseq_dawn_9_3 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 2,
subset = "dawn",
output = "percentage")
no_freqseq_dawn_10_1 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
subset = "dawn",
output = "raw")
no_freqseq_dawn_10_2 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 1,
subset = "dawn",
output = "raw")
no_freqseq_dawn_10_3 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 2,
subset = "dawn",
output = "raw")
no_freqseq_dawn <- as.data.frame(
cbind(no_freqseq_dawn_9_1,
no_freqseq_dawn_9_2,
no_freqseq_dawn_9_3,
no_freqseq_dawn_10_1,
no_freqseq_dawn_10_2,
no_freqseq_dawn_10_3))
colnames(no_freqseq_dawn) <- c("test_9_1",
"test_9_2",
"test_9_3",
"test_10_1",
"test_10_2",
"test_10_3")
test_no_freqseq_new[[5]] <- no_freqseq_dawn
# Test 11 - Dusk
no_freqseq_dusk_11_1 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
subset = "dusk",
output = "percentage")
no_freqseq_dusk_11_2 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 1,
subset = "dusk",
output = "percentage")
no_freqseq_dusk_11_3 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 2,
subset = "dusk",
output = "percentage")
no_freqseq_dusk_12_1 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
subset = "dusk",
output = "raw")
no_freqseq_dusk_12_2 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 1,
subset = "dusk",
output = "raw")
no_freqseq_dusk_12_3 <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 2,
subset = "dusk",
output = "raw")
no_freqseq_dusk <- as.data.frame(
cbind(no_freqseq_dusk_11_1,
no_freqseq_dusk_11_2,
no_freqseq_dusk_11_3,
no_freqseq_dusk_12_1,
no_freqseq_dusk_12_2,
no_freqseq_dusk_12_3))
colnames(no_freqseq_dusk) <- c("test_11_1",
"test_11_2",
"test_11_3",
"test_12_1",
"test_12_2",
"test_12_3")
test_no_freqseq_new[[6]] <- no_freqseq_dusk
qs::qsave(x = test_no_freqseq_new, file = "D:/OneDrive - Norwegian University of Life Sciences/Work_computer/PhD Norway/Analysis/R_package/Final/soundscapeR/inst/extdata/test_data/list_no_freqseq.qs")
sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
output = "percentage")
aggregated_soundscape_CVR <- aggregate_df(binarized_soundscape = binarized_soundscape_CVR,
output = "incidence_freq")
aggregated_soundscape_CVR_raw <- aggregate_df(binarized_soundscape = binarized_soundscape_CVR,
output = "raw")
test_no_freqseq <- qs::qread(file = "D:/OneDrive - Norwegian University of Life Sciences/Work_computer/PhD Norway/Analysis/R_package/Final/soundscapeR/inst/extdata/test_data/list_no_freqseq.qs")
test_freqseq <- qs::qread(file = "D:/OneDrive - Norwegian University of Life Sciences/Work_computer/PhD Norway/Analysis/R_package/Final/soundscapeR/inst/extdata/test_data/list_freqseq.qs")
sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
output = "percentage")
test_no_freqseq[[1]][1]
library(soundscapeR)
sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
output = "percentage")
test_no_freqseq[[1]][1]
as.double(test_no_freqseq[[1]][1])
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[1]][1]))
test_no_freqseq <- qs::qread(file = "D:/OneDrive - Norwegian University of Life Sciences/Work_computer/PhD Norway/Analysis/R_package/Final/soundscapeR/inst/extdata/test_data/list_no_freqseq.qs")
test_freqseq <- qs::qread(file = "D:/OneDrive - Norwegian University of Life Sciences/Work_computer/PhD Norway/Analysis/R_package/Final/soundscapeR/inst/extdata/test_data/list_freqseq.qs")
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
output = "percentage")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[1]][1]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR,
qvalue = 0,
output = "percentage")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[1]][1]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "percentage")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[1]][2]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "percentage")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[1]][3]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "raw")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[1]][4]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "raw")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[1]][5]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "raw")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[1]][6]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "percentage",
subset = "tod")
testthat::expect_equal(sounddiv, test_no_freqseq[[2]][[1]])
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "percentage",
subset = "tod")
testthat::expect_equal(sounddiv, test_no_freqseq[[2]][[2]])
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "percentage",
subset = "tod")
testthat::expect_equal(sounddiv, test_no_freqseq[[2]][[3]])
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "raw",
subset = "tod")
testthat::expect_equal(sounddiv, test_no_freqseq[[2]][[4]])
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "raw",
subset = "tod")
testthat::expect_equal(sounddiv, test_no_freqseq[[2]][[5]])
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "raw",
subset = "tod")
testthat::expect_equal(sounddiv, test_no_freqseq[[2]][[6]])
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "percentage",
subset = "day")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[3]][1]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "percentage",
subset = "day")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[3]][2]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "percentage",
subset = "day")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[3]][3]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "raw",
subset = "day")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[3]][4]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "raw",
subset = "day")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[3]][5]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "raw",
subset = "day")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[3]][6]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "percentage",
subset = "night")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[4]][1]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "percentage",
subset = "night")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[4]][2]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "percentage",
subset = "night")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[4]][3]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "raw",
subset = "night")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[4]][4]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "raw",
subset = "night")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[4]][5]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "raw",
subset = "night")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[4]][6]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "percentage",
subset = "dawn")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[5]][1]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "percentage",
subset = "dawn")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[5]][2]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "percentage",
subset = "dawn")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[5]][3]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "raw",
subset = "dawn")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[5]][4]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "raw",
subset = "dawn")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[5]][5]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "raw",
subset = "dawn")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[5]][6]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "percentage",
subset = "dusk")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[6]][1]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "percentage",
subset = "dusk")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[6]][2]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "percentage",
subset = "dusk")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[6]][3]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "raw",
subset = "dusk")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[6]][4]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 1,
output = "raw",
subset = "dusk")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[6]][5]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 2,
output = "raw",
subset = "dusk")
testthat::expect_equal(sounddiv, as.double(test_no_freqseq[[6]][6]))
})
testthat::test_that("the sounddiv function works as expected when the correct arguments are supplied", {
sounddiv <- sounddiv(aggregated_soundscape = aggregated_soundscape_CVR_raw,
qvalue = 0,
output = "percentage",
subset = "total",
freqseq = TRUE)
testthat::expect_equal(sounddiv, test_freqseq[[1]][[1]])
})
library(soundscapeR)
library(soundscapeR)
library(soundscapeR)
library(soundscapeR)
library(testthat)
library(soundscapeR)
fpath_CVR <- system.file("/extdata/merged_soundscape/merged_soundscape_CVR.ssc",
package="soundscapeR")
fpath_test <- system.file("/extdata/test_data/sounddiv_test_tod.csv",
package="soundscapeR")
remove.packages("soundscapeR")
library(soundscapeR)
library(soundscapeR)
fpath_CVR <- system.file("/extdata/merged_soundscape/merged_soundscape_CVR.ssc",
package="soundscapeR")
fpath_CVR <- system.file("/extdata/merged_soundscape/merged_soundscape_CVR.ssc",
package="soundscapeR")
fpath_test <- system.file("/extdata/test_data/sounddiv_test_tod.csv",
package="soundscapeR")
fpath_output
fpath_CVR
fpath_test
fpath_CVR <- system.file("/extdata/merged_soundscape/merged_soundscape_CVR.ssc",
package="soundscapeR")
fpath_test <- system.file("/extdata/test_data/sounddiv_test_tod.csv",
package="soundscapeR")
fpath_test
test_no_freqseq <- qs::qread(file = paste0(fpath_test, "/list_no_freqseq.qs"))
paste0(fpath_test, "/list_no_freqseq.qs")
fpath_test <- system.file("/extdata/test_data",
package="soundscapeR")
test_no_freqseq <- qs::qread(file = paste0(fpath_test, "/list_no_freqseq.qs"))
test_freqseq <- qs::qread(file = paste0(fpath_test, "/list_freqseq.qs"))
library(soundscapeR)
library(soundscapeR)
remove.packages("soundscapeR")
remove.packages("soundscapeR")
.libPaths(c("D:/User/Documents/R/win-library/4.1"))
.libPaths("C:/Program Files/R/R-4.1.2/library")
.libPaths("C:/Program Files/R/R-4.1.2/library")
.libPaths("C:/Program Files/R/R-4.1.2/library")
library(soundscapeR)
install.packages("magrittr")
install.packages("usethis")
usethis::use_package("magrittr")
library(soundscapeR)
install.packages("roxygen2")
.libPaths()
getwd()
install.packages("roxygen2")
install.packages("tictoc")
install.packages("tidyverse")
install.packages("chron")
install.packages("autothresholdr")
install.packages("lutz")
install.packages("reshape2")
install.packages("viridis")
install.packages("plotly")
install.packages("cowplot")
install.packages("pracma")
install.packages("patchwork")
install.packages("hilldiv")
install.packages("photobiology")
install.packages("extrafont")
install.packages("png")
install.packages("plsgenomics")
install.packages("gridExtra")
install.packages("fields")
install.packages("ape")
install.packages("geiger")
install.packages("vdiffr")
install.packages("qs")
install.packages("BiocManager")
BiocManager::install("limma")
library(soundscapeR)
library(soundscapeR)
install.packages("testthat")
my_reporter <- testthat::ProgressReporter$new(max_failures = 10)
devtools::test(reporter = my_reporter)
install.packages("devtools")
devtools::test(reporter = my_reporter)
my_reporter <- testthat::ProgressReporter$new(max_failures = 10)
devtools::test(reporter = my_reporter)
library(soundscapeR)
library(soundscapeR)
my_reporter <- testthat::ProgressReporter$new(max_failures = 10)
option(testthat.default_reporter = my_reporter)
testthat::set_reporter(reporter = my_reporter)
library(soundscapeR)
Sys.setenv('TESTTHAT_MAX_FAILS' = 10)
library(soundscapeR)
Sys.setenv('TESTTHAT_MAX_FAILS' = 10)
library(soundscapeR)
library(soundscapeR)
library(soundscapeR)
library(soundscapeR)
